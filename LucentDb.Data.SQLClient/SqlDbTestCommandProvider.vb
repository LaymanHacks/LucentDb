'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports LucentDb.Data.DbCommandProvider

Namespace LucentDb.Data.SqlDbCommandProvider
    Public Class SqlDbTestCommandProvider
        Implements IDbTestCommandProvider

        ReadOnly _dbConnHolder As DbConnectionHolder

        Public Sub New()
            _dbConnHolder = New DbConnectionHolder(DbConnectionName)
        End Sub

        Public ReadOnly Property DbConnectionName As String Implements IDbTestCommandProvider.DbConnectionName
            Get
                Return "LucentDbConnection"
            End Get
        End Property

        Public ReadOnly Property TestDbConnectionHolder As DbConnectionHolder _
            Implements IDbTestCommandProvider.TestDbConnectionHolder
            Get
                Return _dbConnHolder
            End Get
        End Property


        ''' <summary>
        '''     Selects one or more records from the Test table
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbTestCommandProvider.GetGetDataDbCommand

            Dim command As New SqlCommand("Test_Select")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Updates one or more records from the Test table
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <param name="testValueTypeId" />
        ''' <param name="projectId" />
        ''' <param name="groupId" />
        ''' <param name="name" />
        ''' <param name="testValue" />
        ''' <param name="isActive" />
        ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUpdateDbCommand(testTypeId As Int32, testValueTypeId As Int32, projectId As Int32,
                                           groupId As Nullable(Of Int32), name As String, testValue As String,
                                           isActive As Boolean, id As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetUpdateDbCommand

            Dim command As New SqlCommand("Test_Update")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            If (GroupId.HasValue = true) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, DBNull.Value))
            End If

            If (Not name Is Nothing) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.varchar, name))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.varchar, DBNull.Value))
            End If

            If (Not testValue Is Nothing) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValue", SqlDbType.text, testValue))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValue", SqlDbType.text,
                                                                                DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IsActive", SqlDbType.bit, isActive))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.int, id))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Deletes one or more records from the Test table
        ''' </summary>
        ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDeleteDbCommand(id As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetDeleteDbCommand

            Dim command As New SqlCommand("Test_Delete")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.int, id))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Inserts a record into the Test table on the database.
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <param name="testValueTypeId" />
        ''' <param name="projectId" />
        ''' <param name="groupId" />
        ''' <param name="name" />
        ''' <param name="testValue" />
        ''' <param name="isActive" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsertDbCommand(testTypeId As Int32, testValueTypeId As Int32, projectId As Int32,
                                           groupId As Nullable(Of Int32), name As String, testValue As String,
                                           isActive As Boolean) As IDbCommand _
            Implements IDbTestCommandProvider.GetInsertDbCommand

            Dim command As New SqlCommand("Test_Insert")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            If (GroupId.HasValue = true) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, DBNull.Value))
            End If

            If (Not name Is Nothing) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.varchar, name))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.varchar, DBNull.Value))
            End If

            If (Not testValue Is Nothing) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValue", SqlDbType.text, testValue))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValue", SqlDbType.text,
                                                                                DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IsActive", SqlDbType.bit, isActive))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataPageableDbCommand(sortExpression As String, page As Int32, pageSize As Int32) _
            As IDbCommand Implements IDbTestCommandProvider.GetGetDataPageableDbCommand

            Dim command As New SqlCommand("Test_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetRowCountDbCommand() As IDbCommand _
            Implements IDbTestCommandProvider.GetGetRowCountDbCommand

            Dim command As New SqlCommand("Test_GetRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function  GetDataById returns a IDataReader for Test
        ''' </summary>
        ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByIdDbCommand(id As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByIdDbCommand

            Dim command As New SqlCommand("Test_GetDataById")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.int, id))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveData returns a IDataReader for Test with records that are marked as active
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataDbCommand() As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataDbCommand

            Dim command As New SqlCommand("Test_GetActiveData")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataPageable returns a IDataReader populated with paged active records from Test
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataPageableDbCommand(sortExpression As String, page As Int32, pageSize As Int32) _
            As IDbCommand Implements IDbTestCommandProvider.GetGetActiveDataPageableDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataRowCount returns the row count for Test
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataRowCountDbCommand() As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataRowCountDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByProjectId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="projectId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByProjectIdDbCommand(projectId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByProjectIdDbCommand

            Dim command As New SqlCommand("Test_GetDataByProjectId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByProjectIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="projectId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByProjectIdPageableDbCommand(projectId As Int32, sortExpression As String,
                                                               page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByProjectIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetDataByProjectIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="projectId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByProjectIdRowCountDbCommand(projectId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByProjectIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetDataByProjectIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByProjectId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="projectId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByProjectIdDbCommand(projectId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByProjectIdDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByProjectId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByProjectIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="projectId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByProjectIdPageableDbCommand(projectId As Int32, sortExpression As String,
                                                                     page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByProjectIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByProjectIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="projectId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByProjectIdRowCountDbCommand(projectId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByProjectIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByProjectIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByGroupId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="groupId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByGroupIdDbCommand(groupId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByGroupIdDbCommand

            Dim command As New SqlCommand("Test_GetDataByGroupId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByGroupIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="groupId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByGroupIdPageableDbCommand(groupId As Int32, sortExpression As String, page As Int32,
                                                             pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByGroupIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetDataByGroupIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="groupId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByGroupIdRowCountDbCommand(groupId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByGroupIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetDataByGroupIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByGroupId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="groupId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByGroupIdDbCommand(groupId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByGroupIdDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByGroupId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByGroupIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="groupId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByGroupIdPageableDbCommand(groupId As Int32, sortExpression As String,
                                                                   page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByGroupIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByGroupIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="groupId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByGroupIdRowCountDbCommand(groupId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByGroupIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByGroupIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestTypeId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestTypeIdDbCommand(testTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByTestTypeIdDbCommand

            Dim command As New SqlCommand("Test_GetDataByTestTypeId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestTypeIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestTypeIdPageableDbCommand(testTypeId As Int32, sortExpression As String,
                                                                page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByTestTypeIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetDataByTestTypeIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestTypeIdRowCountDbCommand(testTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByTestTypeIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetDataByTestTypeIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByTestTypeId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByTestTypeIdDbCommand(testTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByTestTypeIdDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByTestTypeId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByTestTypeIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByTestTypeIdPageableDbCommand(testTypeId As Int32, sortExpression As String,
                                                                      page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByTestTypeIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByTestTypeIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="testTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByTestTypeIdRowCountDbCommand(testTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByTestTypeIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByTestTypeIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestTypeId", SqlDbType.int, testTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestValueTypeId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="testValueTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestValueTypeIdDbCommand(testValueTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByTestValueTypeIdDbCommand

            Dim command As New SqlCommand("Test_GetDataByTestValueTypeId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestValueTypeIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="testValueTypeId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestValueTypeIdPageableDbCommand(testValueTypeId As Int32, sortExpression As String,
                                                                     page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByTestValueTypeIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetDataByTestValueTypeIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="testValueTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestValueTypeIdRowCountDbCommand(testValueTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetDataByTestValueTypeIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetDataByTestValueTypeIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByTestValueTypeId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="testValueTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByTestValueTypeIdDbCommand(testValueTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByTestValueTypeIdDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByTestValueTypeId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetActiveDataByTestValueTypeIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="testValueTypeId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByTestValueTypeIdPageableDbCommand(testValueTypeId As Int32,
                                                                           sortExpression As String, page As Int32,
                                                                           pageSize As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByTestValueTypeIdPageableDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByTestValueTypeIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="testValueTypeId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetActiveDataByTestValueTypeIdRowCountDbCommand(testValueTypeId As Int32) As IDbCommand _
            Implements IDbTestCommandProvider.GetGetActiveDataByTestValueTypeIdRowCountDbCommand

            Dim command As New SqlCommand("Test_GetActiveDataByTestValueTypeIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestValueTypeId", SqlDbType.int,
                                                                            testValueTypeId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function
    End Class
End Namespace
