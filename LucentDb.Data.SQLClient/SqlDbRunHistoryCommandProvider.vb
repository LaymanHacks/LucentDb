'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports LucentDb.Data.DbCommandProvider

Namespace LucentDb.Data.SqlDbCommandProvider 

  
Public Class SqlDbRunHistoryCommandProvider
      Implements IDbRunHistoryCommandProvider
    
      ReadOnly _dbConnHolder As DbConnectionHolder

      Public Sub New()
          _dbConnHolder = New DbConnectionHolder(DbConnectionName)
      End Sub

      Public ReadOnly Property DbConnectionName() As String Implements IDbRunHistoryCommandProvider.DbConnectionName
          Get
              Return "LucentDbConnection"
          End Get
      End Property

      Public ReadOnly Property RunHistoryDbConnectionHolder() As DbConnectionHolder Implements IDbRunHistoryCommandProvider.RunHistoryDbConnectionHolder
          Get
              Return _dbConnHolder
          End Get
      End Property
      
    
        ''' <summary>
        ''' Selects one or more records from the RunHistory table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataDbCommand
            
            Dim command As New SqlCommand("RunHistory_Select")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Updates one or more records from the RunHistory table 
        ''' </summary>
      ''' <param name="scriptId" />
      ''' <param name="runDateTime" />
      ''' <param name="isPass" />
      ''' <param name="resultString" />
      ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand( ByVal scriptId As Int32,  ByVal runDateTime As DateTime,  ByVal isPass As Boolean,  ByVal resultString As String,  ByVal id As Int64) As IDbCommand Implements IDbRunHistoryCommandProvider.GetUpdateDbCommand
            
            Dim command As New SqlCommand("RunHistory_Update")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunDateTime", SqlDbType.datetime, runDateTime))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IsPass", SqlDbType.bit, isPass))
      
            If (Not resultString  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResultString", SqlDbType.varchar, resultString))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResultString", SqlDbType.varchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.bigint, id))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Deletes one or more records from the RunHistory table 
        ''' </summary>
      ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand( ByVal id As Int64) As IDbCommand Implements IDbRunHistoryCommandProvider.GetDeleteDbCommand
            
            Dim command As New SqlCommand("RunHistory_Delete")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.bigint, id))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Inserts a record into the RunHistory table on the database.
        ''' </summary>
      ''' <param name="scriptId" />
      ''' <param name="runDateTime" />
      ''' <param name="isPass" />
      ''' <param name="resultString" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand( ByVal scriptId As Int32,  ByVal runDateTime As DateTime,  ByVal isPass As Boolean,  ByVal resultString As String) As IDbCommand Implements IDbRunHistoryCommandProvider.GetInsertDbCommand
            
            Dim command As New SqlCommand("RunHistory_Insert")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunDateTime", SqlDbType.datetime, runDateTime))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IsPass", SqlDbType.bit, isPass))
      
            If (Not resultString  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResultString", SqlDbType.varchar, resultString))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResultString", SqlDbType.varchar, global.System.DBNull.Value))
      End If
        
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataPageableDbCommand( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataPageableDbCommand
            
            Dim command As New SqlCommand("RunHistory_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetRowCountDbCommand
            
            Dim command As New SqlCommand("RunHistory_GetRowCount")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function  GetDataById returns a IDataReader for RunHistory
        ''' </summary>
      ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByIdDbCommand( ByVal id As Int64) As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataByIdDbCommand
            
            Dim command As New SqlCommand("RunHistory_GetDataById")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.bigint, id))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByScriptId returns a IDataReader for RunHistory
        ''' </summary>
      ''' <param name="scriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByScriptIdDbCommand( ByVal scriptId As Int32) As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataByScriptIdDbCommand
            
            Dim command As New SqlCommand("RunHistory_GetDataByScriptId")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByScriptIdPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
      ''' <param name="scriptId" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByScriptIdPageableDbCommand( ByVal scriptId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataByScriptIdPageableDbCommand
            
            Dim command As New SqlCommand("RunHistory_GetDataByScriptIdPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for RunHistory
        ''' </summary>
      ''' <param name="scriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByScriptIdRowCountDbCommand( ByVal scriptId As Int32) As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataByScriptIdRowCountDbCommand
            
            Dim command As New SqlCommand("RunHistory_GetDataByScriptIdRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
  End Class
 End Namespace
  