'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports LucentDb.Data.DbCommandProvider

Namespace LucentDb.Data.SqlDbCommandProvider
    Public Class SqlDbRunHistoryCommandProvider
        Implements IDbRunHistoryCommandProvider

        ReadOnly _dbConnHolder As DbConnectionHolder

        Public Sub New()
            _dbConnHolder = New DbConnectionHolder(DbConnectionName)
        End Sub

        Public ReadOnly Property DbConnectionName As String Implements IDbRunHistoryCommandProvider.DbConnectionName
            Get
                Return "LucentDbConnection"
            End Get
        End Property

        Public ReadOnly Property RunHistoryDbConnectionHolder As DbConnectionHolder _
            Implements IDbRunHistoryCommandProvider.RunHistoryDbConnectionHolder
            Get
                Return _dbConnHolder
            End Get
        End Property


        ''' <summary>
        '''     Selects one or more records from the RunHistory table
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataDbCommand

            Dim command As New SqlCommand("RunHistory_Select")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Updates one or more records from the RunHistory table
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="projectId" />
        ''' <param name="groupId" />
        ''' <param name="connectionId" />
        ''' <param name="runDateTime" />
        ''' <param name="totalDuration" />
        ''' <param name="isValid" />
        ''' <param name="runLog" />
        ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUpdateDbCommand(testId As Nullable(Of Int32), projectId As Nullable(Of Int32),
                                           groupId As Nullable(Of Int32), connectionId As Nullable(Of Int32),
                                           runDateTime As DateTime, totalDuration As Nullable(Of Decimal),
                                           isValid As Boolean, runLog As String, id As Int64) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetUpdateDbCommand

            Dim command As New SqlCommand("RunHistory_Update")
            command.CommandType = CommandType.StoredProcedure

            If (TestId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, DBNull.Value))
            End If

            If (ProjectId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int,
                                                                                DBNull.Value))
            End If

            If (GroupId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, DBNull.Value))
            End If

            If (ConnectionId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ConnectionId", SqlDbType.int,
                                                                                connectionId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ConnectionId", SqlDbType.int,
                                                                                DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunDateTime", SqlDbType.datetime,
                                                                            runDateTime))

            If (TotalDuration.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TotalDuration", SqlDbType.decimal,
                                                                                totalDuration))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TotalDuration", SqlDbType.decimal,
                                                                                DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IsValid", SqlDbType.bit, isValid))

            If (Not runLog Is Nothing) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunLog", SqlDbType.text, runLog))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunLog", SqlDbType.text, DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.bigint, id))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Deletes one or more records from the RunHistory table
        ''' </summary>
        ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDeleteDbCommand(id As Int64) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetDeleteDbCommand

            Dim command As New SqlCommand("RunHistory_Delete")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.bigint, id))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Inserts a record into the RunHistory table on the database.
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="projectId" />
        ''' <param name="groupId" />
        ''' <param name="connectionId" />
        ''' <param name="runDateTime" />
        ''' <param name="totalDuration" />
        ''' <param name="isValid" />
        ''' <param name="runLog" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsertDbCommand(testId As Nullable(Of Int32), projectId As Nullable(Of Int32),
                                           groupId As Nullable(Of Int32), connectionId As Nullable(Of Int32),
                                           runDateTime As DateTime, totalDuration As Nullable(Of Decimal),
                                           isValid As Boolean, runLog As String) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetInsertDbCommand

            Dim command As New SqlCommand("RunHistory_Insert")
            command.CommandType = CommandType.StoredProcedure

            If (TestId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, DBNull.Value))
            End If

            If (ProjectId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int,
                                                                                DBNull.Value))
            End If

            If (GroupId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, DBNull.Value))
            End If

            If (ConnectionId.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ConnectionId", SqlDbType.int,
                                                                                connectionId))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ConnectionId", SqlDbType.int,
                                                                                DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunDateTime", SqlDbType.datetime,
                                                                            runDateTime))

            If (TotalDuration.HasValue = True) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TotalDuration", SqlDbType.decimal,
                                                                                totalDuration))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TotalDuration", SqlDbType.decimal,
                                                                                DBNull.Value))
            End If
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IsValid", SqlDbType.bit, isValid))

            If (Not runLog Is Nothing) Then
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunLog", SqlDbType.text, runLog))
            Else
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@RunLog", SqlDbType.text, DBNull.Value))
            End If

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataPageableDbCommand(sortExpression As String, page As Int32, pageSize As Int32) _
            As IDbCommand Implements IDbRunHistoryCommandProvider.GetGetDataPageableDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetRowCountDbCommand() As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetRowCountDbCommand

            Dim command As New SqlCommand("RunHistory_GetRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function  GetDataById returns a IDataReader for RunHistory
        ''' </summary>
        ''' <param name="id" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByIdDbCommand(id As Int64) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByIdDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataById")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Id", SqlDbType.bigint, id))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByProjectId returns a IDataReader for RunHistory
        ''' </summary>
        ''' <param name="projectId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByProjectIdDbCommand(projectId As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByProjectIdDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByProjectId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByProjectIdPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
        ''' <param name="projectId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByProjectIdPageableDbCommand(projectId As Int32, sortExpression As String,
                                                               page As Int32, pageSize As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByProjectIdPageableDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByProjectIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' <param name="projectId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByProjectIdRowCountDbCommand(projectId As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByProjectIdRowCountDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByProjectIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProjectId", SqlDbType.int, projectId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestId returns a IDataReader for RunHistory
        ''' </summary>
        ''' <param name="testId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestIdDbCommand(testId As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByTestIdDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByTestId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestIdPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestIdPageableDbCommand(testId As Int32, sortExpression As String, page As Int32,
                                                            pageSize As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByTestIdPageableDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByTestIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' <param name="testId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestIdRowCountDbCommand(testId As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByTestIdRowCountDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByTestIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByGroupId returns a IDataReader for RunHistory
        ''' </summary>
        ''' <param name="groupId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByGroupIdDbCommand(groupId As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByGroupIdDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByGroupId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByGroupIdPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
        ''' <param name="groupId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByGroupIdPageableDbCommand(groupId As Int32, sortExpression As String, page As Int32,
                                                             pageSize As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByGroupIdPageableDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByGroupIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' <param name="groupId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByGroupIdRowCountDbCommand(groupId As Int32) As IDbCommand _
            Implements IDbRunHistoryCommandProvider.GetGetDataByGroupIdRowCountDbCommand

            Dim command As New SqlCommand("RunHistory_GetDataByGroupIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@GroupId", SqlDbType.int, groupId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function
    End Class
End Namespace
