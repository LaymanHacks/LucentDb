'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports LucentDb.Data.DbCommandProvider

Namespace LucentDb.Data.SqlDbCommandProvider
    Public Class SqlDbTest_ScriptCommandProvider
        Implements IDbTest_ScriptCommandProvider

        ReadOnly _dbConnHolder As DbConnectionHolder

        Public Sub New()
            _dbConnHolder = New DbConnectionHolder(DbConnectionName)
        End Sub

        Public ReadOnly Property DbConnectionName As String Implements IDbTest_ScriptCommandProvider.DbConnectionName
            Get
                Return "LucentDbConnection"
            End Get
        End Property

        Public ReadOnly Property Test_ScriptDbConnectionHolder As DbConnectionHolder _
            Implements IDbTest_ScriptCommandProvider.Test_ScriptDbConnectionHolder
            Get
                Return _dbConnHolder
            End Get
        End Property


        ''' <summary>
        '''     Selects one or more records from the Test_Script table
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbTest_ScriptCommandProvider.GetGetDataDbCommand

            Dim command As New SqlCommand("Test_Script_Select")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Updates one or more records from the Test_Script table
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="scriptId" />
        ''' <param name="original_TestId" />
        ''' <param name="original_ScriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetUpdateDbCommand(testId As Int32, scriptId As Int32, original_TestId As Int32,
                                           original_ScriptId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetUpdateDbCommand

            Dim command As New SqlCommand("Test_Script_Update")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Original_TestId", SqlDbType.int,
                                                                            original_TestId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Original_ScriptId", SqlDbType.int,
                                                                            original_ScriptId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Deletes one or more records from the Test_Script table
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="scriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetDeleteDbCommand(testId As Int32, scriptId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetDeleteDbCommand

            Dim command As New SqlCommand("Test_Script_Delete")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Inserts a record into the Test_Script table on the database.
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="scriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetInsertDbCommand(testId As Int32, scriptId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetInsertDbCommand

            Dim command As New SqlCommand("Test_Script_Insert")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from Test_Script
        ''' </summary>
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataPageableDbCommand(sortExpression As String, page As Int32, pageSize As Int32) _
            As IDbCommand Implements IDbTest_ScriptCommandProvider.GetGetDataPageableDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test_Script
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetRowCountDbCommand() As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetRowCountDbCommand

            Dim command As New SqlCommand("Test_Script_GetRowCount")
            command.CommandType = CommandType.StoredProcedure

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByScriptId returns a IDataReader for Test_Script
        ''' </summary>
        ''' <param name="scriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByScriptIdDbCommand(scriptId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetDataByScriptIdDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataByScriptId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByScriptIdPageable returns a IDataReader populated with a subset of data from Test_Script
        ''' </summary>
        ''' <param name="scriptId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByScriptIdPageableDbCommand(scriptId As Int32, sortExpression As String, page As Int32,
                                                              pageSize As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetDataByScriptIdPageableDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataByScriptIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test_Script
        ''' </summary>
        ''' <param name="scriptId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByScriptIdRowCountDbCommand(scriptId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetDataByScriptIdRowCountDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataByScriptIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ScriptId", SqlDbType.int, scriptId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestId returns a IDataReader for Test_Script
        ''' </summary>
        ''' <param name="testId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestIdDbCommand(testId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetDataByTestIdDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataByTestId")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetDataByTestIdPageable returns a IDataReader populated with a subset of data from Test_Script
        ''' </summary>
        ''' <param name="testId" />
        ''' <param name="sortExpression" />
        ''' <param name="page" />
        ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestIdPageableDbCommand(testId As Int32, sortExpression As String, page As Int32,
                                                            pageSize As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetDataByTestIdPageableDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataByTestIdPageable")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar,
                                                                            sortExpression))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function


        ''' <summary>
        '''     Function GetRowCount returns the row count for Test_Script
        ''' </summary>
        ''' <param name="testId" />
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetGetDataByTestIdRowCountDbCommand(testId As Int32) As IDbCommand _
            Implements IDbTest_ScriptCommandProvider.GetGetDataByTestIdRowCountDbCommand

            Dim command As New SqlCommand("Test_Script_GetDataByTestIdRowCount")
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@TestId", SqlDbType.int, testId))

            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
        End Function
    End Class
End Namespace
