//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;
using LucentDb.Web.UI.Controllers.Api;

namespace LucentDb.Web.UI.Test.Controllers.Api
{
    [TestClass()]
    public class Script_ExpectedResultApiControllerTests
    {
        
        private Mock<IScript_ExpectedResultRepository> _repository;

        private List<Script_ExpectedResult> _repositoryList = new List<Script_ExpectedResult>
        {
        //TODO Initialize test data
            new Script_ExpectedResult()
        };

        private Script_ExpectedResultApiController _target;
        
        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IScript_ExpectedResultRepository>();
            _target = new Script_ExpectedResultApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Script_ExpectedResult") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }
   
                [TestMethod()]
        public void GetDataTest() 
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);
                
            var result = _target.GetData().ToList();
             Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Script_ExpectedResult() 
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32, Int32, Int32, Int32, Int32>((scriptId, expectedResultId, resultIndex, original_ScriptId, original_ExpectedResultId, original_ResultIndex) => 
            { 
                 var tScript_ExpectedResult = _repositoryList.Find(x => );
                 tScript_ExpectedResult.ScriptId = scriptId; 
                 tScript_ExpectedResult.ExpectedResultId = expectedResultId; 
                 tScript_ExpectedResult.ResultIndex = resultIndex; 
            });
            var tempScript_ExpectedResult = _repositoryList.Find(x => );
            var testScript_ExpectedResult = new Script_ExpectedResult {
                 ScriptId = tempScript_ExpectedResult.ScriptId, 
                 ExpectedResultId = tempScript_ExpectedResult.ExpectedResultId, 
                 ResultIndex = tempScript_ExpectedResult.ResultIndex};
            
            //TODO change something on testScript_ExpectedResult
            //testScript_ExpectedResult.oldValue = newValue; 
            _target.Update(testScript_ExpectedResult);
            //Assert.AreEqual(newValue, _repositoryList.Find(x => ).oldValue);
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Script_ExpectedResult() 
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>()))  
                 .Callback();
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Script_ExpectedResult() 
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32, Int32>((scriptId, expectedResultId, resultIndex) => 
            { 
                 _repositoryList.Add(new  Script_ExpectedResult (scriptId, expectedResultId, resultIndex));
            });
            
            //TODO insert values 
            _target.Insert(new Script_ExpectedResult (scriptId, expectedResultId, resultIndex));
            //Assert.AreEqual(11, _repositoryList.Count());
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Script_ExpectedResult> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "ScriptId":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ScriptId));
                              break;
                          case  "ExpectedResultId":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ExpectedResultId));
                              break;
                          case  "ResultIndex":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ResultIndex));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("ScriptId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.ScriptId).FirstOrDefault().ScriptId, expectedResult.Results.FirstOrDefault().ScriptId);
        }

        [TestMethod()]
        public void GetDataByExpectedResultIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByExpectedResultId(It.IsAny<Int32>()))
                     .Returns<Int32>((expectedResultId) => 
                 { 
                      return _repositoryList.Where(x => x.ExpectedResultId==expectedResultId).ToList();
                 });
                
            var result = _target.GetDataByExpectedResultId(expectedResultIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ExpectedResultId==expectedResultIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByExpectedResultIdPageableTest()
        {
            PagedResult<Script_ExpectedResult> expectedResult;

            _repository
                 .Setup(it => it.GetDataByExpectedResultIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((expectedResultId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ExpectedResultId==expectedResultId);
                      switch (sortExpression)
                      {
                          case  "ScriptId":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ScriptId));
                              break;
                          case  "ExpectedResultId":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ExpectedResultId));
                              break;
                          case  "ResultIndex":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ResultIndex));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByExpectedResultIdRowCount(expectedResultId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByExpectedResultIdPageable(ExpectedResultIdValue, "ScriptId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ExpectedResultId==expectedResultId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ExpectedResultId==expectedResultId).OrderBy(q => q.ScriptId).FirstOrDefault().ScriptId, expectedResult.Results.FirstOrDefault().ScriptId);
        }

        [TestMethod()]
        public void GetDataByScriptIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByScriptId(It.IsAny<Int32>()))
                     .Returns<Int32>((scriptId) => 
                 { 
                      return _repositoryList.Where(x => x.ScriptId==scriptId).ToList();
                 });
                
            var result = _target.GetDataByScriptId(scriptIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ScriptId==scriptIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByScriptIdPageableTest()
        {
            PagedResult<Script_ExpectedResult> expectedResult;

            _repository
                 .Setup(it => it.GetDataByScriptIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((scriptId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ScriptId==scriptId);
                      switch (sortExpression)
                      {
                          case  "ScriptId":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ScriptId));
                              break;
                          case  "ExpectedResultId":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ExpectedResultId));
                              break;
                          case  "ResultIndex":
                              query = new List<Script_ExpectedResult>(query.OrderBy(q => q.ResultIndex));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByScriptIdRowCount(scriptId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByScriptIdPageable(ScriptIdValue, "ScriptId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ScriptId==scriptId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ScriptId==scriptId).OrderBy(q => q.ScriptId).FirstOrDefault().ScriptId, expectedResult.Results.FirstOrDefault().ScriptId);
        }


    }
}
