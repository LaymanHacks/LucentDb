//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;
using LucentDb.Web.UI.Controllers.Api;

namespace LucentDb.Web.UI.Test.Controllers.Api
{
    [TestClass()]
    public class Test_ScriptApiControllerTests
    {
        
        private Mock<ITest_ScriptRepository> _repository;

        private List<Test_Script> _repositoryList = new List<Test_Script>
        {
        //TODO Initialize test data
            new Test_Script()
        };

        private Test_ScriptApiController _target;
        
        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<ITest_ScriptRepository>();
            _target = new Test_ScriptApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Test_Script") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }
   
                [TestMethod()]
        public void GetDataTest() 
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);
                
            var result = _target.GetData().ToList();
             Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Test_Script() 
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32, Int32, Int32>((testId, scriptId, original_TestId, original_ScriptId) => 
            { 
                 var tTest_Script = _repositoryList.Find(x => );
                 tTest_Script.TestId = testId; 
                 tTest_Script.ScriptId = scriptId; 
            });
            var tempTest_Script = _repositoryList.Find(x => );
            var testTest_Script = new Test_Script {
                 TestId = tempTest_Script.TestId, 
                 ScriptId = tempTest_Script.ScriptId};
            
            //TODO change something on testTest_Script
            //testTest_Script.oldValue = newValue; 
            _target.Update(testTest_Script);
            //Assert.AreEqual(newValue, _repositoryList.Find(x => ).oldValue);
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Test_Script() 
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>(), It.IsAny<Int32>()))  
                 .Callback();
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Test_Script() 
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32>((testId, scriptId) => 
            { 
                 _repositoryList.Add(new  Test_Script (testId, scriptId));
            });
            
            //TODO insert values 
            _target.Insert(new Test_Script (testId, scriptId));
            //Assert.AreEqual(11, _repositoryList.Count());
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Test_Script> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "TestId":
                              query = new List<Test_Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptId":
                              query = new List<Test_Script>(query.OrderBy(q => q.ScriptId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("TestId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.TestId).FirstOrDefault().TestId, expectedResult.Results.FirstOrDefault().TestId);
        }

        [TestMethod()]
        public void GetDataByScriptIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByScriptId(It.IsAny<Int32>()))
                     .Returns<Int32>((scriptId) => 
                 { 
                      return _repositoryList.Where(x => x.ScriptId==scriptId).ToList();
                 });
                
            var result = _target.GetDataByScriptId(scriptIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ScriptId==scriptIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByScriptIdPageableTest()
        {
            PagedResult<Test_Script> expectedResult;

            _repository
                 .Setup(it => it.GetDataByScriptIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((scriptId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ScriptId==scriptId);
                      switch (sortExpression)
                      {
                          case  "TestId":
                              query = new List<Test_Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptId":
                              query = new List<Test_Script>(query.OrderBy(q => q.ScriptId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByScriptIdRowCount(scriptId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByScriptIdPageable(ScriptIdValue, "TestId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ScriptId==scriptId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ScriptId==scriptId).OrderBy(q => q.TestId).FirstOrDefault().TestId, expectedResult.Results.FirstOrDefault().TestId);
        }

        [TestMethod()]
        public void GetDataByTestIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByTestId(It.IsAny<Int32>()))
                     .Returns<Int32>((testId) => 
                 { 
                      return _repositoryList.Where(x => x.TestId==testId).ToList();
                 });
                
            var result = _target.GetDataByTestId(testIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.TestId==testIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByTestIdPageableTest()
        {
            PagedResult<Test_Script> expectedResult;

            _repository
                 .Setup(it => it.GetDataByTestIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((testId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.TestId==testId);
                      switch (sortExpression)
                      {
                          case  "TestId":
                              query = new List<Test_Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptId":
                              query = new List<Test_Script>(query.OrderBy(q => q.ScriptId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByTestIdRowCount(testId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByTestIdPageable(TestIdValue, "TestId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.TestId==testId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.TestId==testId).OrderBy(q => q.TestId).FirstOrDefault().TestId, expectedResult.Results.FirstOrDefault().TestId);
        }


    }
}
