//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;
using LucentDb.Web.UI.Controllers.Api;

namespace LucentDb.Web.UI.Test.Controllers.Api
{
    [TestClass()]
    public class ScriptApiControllerTests
    {
        
        private Mock<IScriptRepository> _repository;

        private List<Script> _repositoryList = new List<Script>
        {
        //TODO Initialize test data
            new Script()
        };

        private ScriptApiController _target;
        
        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IScriptRepository>();
            _target = new ScriptApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Scripts") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }
   
                [TestMethod()]
        public void GetDataTest() 
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);
                
            var result = _target.GetData().ToList();
             Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Script() 
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<Boolean>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32, String, String, Boolean, Int32>((testId, scriptTypeId, name, scriptValue, isActive, id) => 
            { 
                 var tScript = _repositoryList.Find(x => x.Id==id);
                 tScript.TestId = testId; 
                 tScript.ScriptTypeId = scriptTypeId; 
                 tScript.Name = name; 
                 tScript.ScriptValue = scriptValue; 
                 tScript.IsActive = isActive; 
            });
            var tempScript = _repositoryList.Find(x => x.Id==id);
            var testScript = new Script {
                 Id = tempScript.Id, 
                 TestId = tempScript.TestId, 
                 ScriptTypeId = tempScript.ScriptTypeId, 
                 Name = tempScript.Name, 
                 ScriptValue = tempScript.ScriptValue, 
                 IsActive = tempScript.IsActive};
            
            //TODO change something on testScript
            //testScript.oldValue = newValue; 
            _target.Update(testScript);
            //Assert.AreEqual(newValue, _repositoryList.Find(x => x.Id==1).oldValue);
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Script() 
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>()))  
                 .Callback<Int32>((id) => 
                 { 
                      var i = _repositoryList.FindIndex(q => q.Id==id);
                      _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Script() 
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<String>(), It.IsAny<Boolean>()))
                 .Returns<Int32, Int32, String, String, Boolean>((testId, scriptTypeId, name, scriptValue, isActive) => 
            { 
                 _repositoryList.Add(new  Script (testId, scriptTypeId, name, scriptValue, isActive));
            });
            
            //TODO insert values 
            _target.Insert(new Script (testId, scriptTypeId, name, scriptValue, isActive));
            //Assert.AreEqual(11, _repositoryList.Count());
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Script> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Script>(query.OrderBy(q => q.Id));
                              break;
                          case  "TestId":
                              query = new List<Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptTypeId":
                              query = new List<Script>(query.OrderBy(q => q.ScriptTypeId));
                              break;
                          case  "Name":
                              query = new List<Script>(query.OrderBy(q => q.Name));
                              break;
                          case  "ScriptValue":
                              query = new List<Script>(query.OrderBy(q => q.ScriptValue));
                              break;
                          case  "IsActive":
                              query = new List<Script>(query.OrderBy(q => q.IsActive));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("Id", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }

        [TestMethod()]
        public void GetDataByIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataById(It.IsAny<Int32>()))
                     .Returns<Int32>((id) => 
                 { 
                      return _repositoryList.Where(x => x.Id==id).ToList();
                 });
                
            var result = _target.GetDataById(idValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.Id==idValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetActiveDataTest() 
        {
            _repository
                 .Setup(it => it.GetActiveData())
                     .Returns(_repositoryList);
                
            var result = _target.GetActiveData().ToList();
             Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetActiveDataPageableTest()
        {
            PagedResult<Script> expectedResult;

            _repository
                 .Setup(it => it.GetActiveDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Script>(query.OrderBy(q => q.Id));
                              break;
                          case  "TestId":
                              query = new List<Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptTypeId":
                              query = new List<Script>(query.OrderBy(q => q.ScriptTypeId));
                              break;
                          case  "Name":
                              query = new List<Script>(query.OrderBy(q => q.Name));
                              break;
                          case  "ScriptValue":
                              query = new List<Script>(query.OrderBy(q => q.ScriptValue));
                              break;
                          case  "IsActive":
                              query = new List<Script>(query.OrderBy(q => q.IsActive));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetActiveDataRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetActiveDataPageable("Id", 1, PageSizeValue);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }

        [TestMethod()]
        public void GetDataByScriptTypeIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByScriptTypeId(It.IsAny<Int32>()))
                     .Returns<Int32>((scriptTypeId) => 
                 { 
                      return _repositoryList.Where(x => x.ScriptTypeId==scriptTypeId).ToList();
                 });
                
            var result = _target.GetDataByScriptTypeId(scriptTypeIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ScriptTypeId==scriptTypeIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByScriptTypeIdPageableTest()
        {
            PagedResult<Script> expectedResult;

            _repository
                 .Setup(it => it.GetDataByScriptTypeIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((scriptTypeId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ScriptTypeId==scriptTypeId);
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Script>(query.OrderBy(q => q.Id));
                              break;
                          case  "TestId":
                              query = new List<Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptTypeId":
                              query = new List<Script>(query.OrderBy(q => q.ScriptTypeId));
                              break;
                          case  "Name":
                              query = new List<Script>(query.OrderBy(q => q.Name));
                              break;
                          case  "ScriptValue":
                              query = new List<Script>(query.OrderBy(q => q.ScriptValue));
                              break;
                          case  "IsActive":
                              query = new List<Script>(query.OrderBy(q => q.IsActive));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByScriptTypeIdRowCount(scriptTypeId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByScriptTypeIdPageable(ScriptTypeIdValue, "Id", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ScriptTypeId==scriptTypeId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ScriptTypeId==scriptTypeId).OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }

        [TestMethod()]
        public void GetActiveDataByScriptTypeIdTest() 
        {
            _repository
                 .Setup(it => it.GetActiveDataByScriptTypeId(It.IsAny<Int32>()))
                     .Returns<Int32>((scriptTypeId) => 
                 { 
                      return _repositoryList.Where(x => x.ScriptTypeId==scriptTypeId).ToList();
                 });
                
            var result = _target.GetActiveDataByScriptTypeId(scriptTypeIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ScriptTypeId==scriptTypeIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetActiveDataByScriptTypeIdPageableTest()
        {
            PagedResult<Script> expectedResult;

            _repository
                 .Setup(it => it.GetActiveDataByScriptTypeIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((scriptTypeId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "Id":
                              query = new List<Script>(query.OrderBy(q => q.Id));
                              break;
                          case  "TestId":
                              query = new List<Script>(query.OrderBy(q => q.TestId));
                              break;
                          case  "ScriptTypeId":
                              query = new List<Script>(query.OrderBy(q => q.ScriptTypeId));
                              break;
                          case  "Name":
                              query = new List<Script>(query.OrderBy(q => q.Name));
                              break;
                          case  "ScriptValue":
                              query = new List<Script>(query.OrderBy(q => q.ScriptValue));
                              break;
                          case  "IsActive":
                              query = new List<Script>(query.OrderBy(q => q.IsActive));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetActiveDataByScriptTypeIdRowCount(scriptTypeId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetActiveDataByScriptTypeIdPageable(ScriptTypeIdValue, "Id", 1, PageSizeValue);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.Id).FirstOrDefault().Id, expectedResult.Results.FirstOrDefault().Id);
        }


    }
}
