//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;
using LucentDb.Web.UI.Controllers.Api;

namespace LucentDb.Web.UI.Test.Controllers.Api
{
    [TestClass()]
    public class Project_ConnectionApiControllerTests
    {
        
        private Mock<IProject_ConnectionRepository> _repository;

        private List<Project_Connection> _repositoryList = new List<Project_Connection>
        {
        //TODO Initialize test data
            new Project_Connection()
        };

        private Project_ConnectionApiController _target;
        
        [TestInitialize]
        public void Init()
        {
            _repository = new Mock<IProject_ConnectionRepository>();
            _target = new Project_ConnectionApiController(_repository.Object)
            {
                Request = new HttpRequestMessage { RequestUri = new Uri("http://localhost/api/Project_Connection") }
            };

            var config = new HttpConfiguration();

            config.MapHttpAttributeRoutes();
            config.EnsureInitialized();

            _target.Request.SetConfiguration(config);
        }
   
                [TestMethod()]
        public void GetDataTest() 
        {
            _repository
                 .Setup(it => it.GetData())
                     .Returns(_repositoryList);
                
            var result = _target.GetData().ToList();
             Assert.AreEqual(_repositoryList.ToList().Count, result.Count);
        }

        [TestMethod()]
        public void Update_Should_Update_A_Project_Connection() 
        {
            _repository
                 .Setup(it => it.Update(It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Callback<Int32, Int32, Int32, Int32>((projectId, connectionId, original_ProjectId, original_ConnectionId) => 
            { 
                 var tProject_Connection = _repositoryList.Find(x => x.ProjectId==projectId & x.ConnectionId==connectionId);
            });
            var tempProject_Connection = _repositoryList.Find(x => x.ProjectId==projectId & x.ConnectionId==connectionId);
            var testProject_Connection = new Project_Connection {
                 ProjectId = tempProject_Connection.ProjectId, 
                 ConnectionId = tempProject_Connection.ConnectionId};
            
            //TODO change something on testProject_Connection
            //testProject_Connection.oldValue = newValue; 
            _target.Update(testProject_Connection);
            //Assert.AreEqual(newValue, _repositoryList.Find(x => x.ProjectId==1 & x.ConnectionId==1).oldValue);
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void Delete_Should_Delete_A_Project_Connection() 
        {
            _repository
                 .Setup(it => it.Delete(It.IsAny<Int32>(), It.IsAny<Int32>()))  
                 .Callback<Int32, Int32>((projectId, connectionId) => 
                 { 
                      var i = _repositoryList.FindIndex(q => q.ProjectId==projectId & q.ConnectionId==connectionId);
                      _repositoryList.RemoveAt(i);
                 });
            var iniCount = _repositoryList.Count();
            HttpResponseMessage result = _target.Delete(1);
            Assert.AreEqual(iniCount - 1, _repositoryList.Count());
            Assert.AreEqual(HttpStatusCode.OK, result.StatusCode);
        }

        [TestMethod()]
        public void Insert_Should_Insert_A_Project_Connection() 
        {
            _repository
                 .Setup(it => it.Insert(It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, Int32>((projectId, connectionId) => 
            { 
                 _repositoryList.Add(new  Project_Connection (projectId, connectionId));
            });
            
            //TODO insert values 
            _target.Insert(new Project_Connection (projectId, connectionId));
            //Assert.AreEqual(11, _repositoryList.Count());
            //TODO fail until we update the test above
            Assert.Fail();
        }

        [TestMethod()]
        public void GetDataPageableTest()
        {
            PagedResult<Project_Connection> expectedResult;

            _repository
                 .Setup(it => it.GetDataPageable(It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<String, Int32, Int32>((sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList;
                      switch (sortExpression)
                      {
                          case  "ProjectId":
                              query = new List<Project_Connection>(query.OrderBy(q => q.ProjectId));
                              break;
                          case  "ConnectionId":
                              query = new List<Project_Connection>(query.OrderBy(q => q.ConnectionId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetRowCount())
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataPageable("ProjectId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.OrderBy(q => q.ProjectId).FirstOrDefault().ProjectId, expectedResult.Results.FirstOrDefault().ProjectId);
        }

        [TestMethod()]
        public void GetDataByProjectIdConnectionIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByProjectIdConnectionId(It.IsAny<Int32>(), It.IsAny<Int32>()))
                     .Returns<Int32, Int32>((projectId, connectionId) => 
                 { 
                      return _repositoryList.Where(x => x.ProjectId==projectId & x.ConnectionId==connectionId).ToList();
                 });
                
            var result = _target.GetDataByProjectIdConnectionId(projectIdValue, connectionIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ProjectId==projectIdValue & x.ConnectionId==connectionIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByConnectionIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByConnectionId(It.IsAny<Int32>()))
                     .Returns<Int32>((connectionId) => 
                 { 
                      return _repositoryList.Where(x => x.ConnectionId==connectionId).ToList();
                 });
                
            var result = _target.GetDataByConnectionId(connectionIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ConnectionId==connectionIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByConnectionIdPageableTest()
        {
            PagedResult<Project_Connection> expectedResult;

            _repository
                 .Setup(it => it.GetDataByConnectionIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((connectionId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ConnectionId==connectionId);
                      switch (sortExpression)
                      {
                          case  "ProjectId":
                              query = new List<Project_Connection>(query.OrderBy(q => q.ProjectId));
                              break;
                          case  "ConnectionId":
                              query = new List<Project_Connection>(query.OrderBy(q => q.ConnectionId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByConnectionIdRowCount(connectionId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByConnectionIdPageable(ConnectionIdValue, "ProjectId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ConnectionId==connectionId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ConnectionId==connectionId).OrderBy(q => q.ProjectId).FirstOrDefault().ProjectId, expectedResult.Results.FirstOrDefault().ProjectId);
        }

        [TestMethod()]
        public void GetDataByProjectIdTest() 
        {
            _repository
                 .Setup(it => it.GetDataByProjectId(It.IsAny<Int32>()))
                     .Returns<Int32>((projectId) => 
                 { 
                      return _repositoryList.Where(x => x.ProjectId==projectId).ToList();
                 });
                
            var result = _target.GetDataByProjectId(projectIdValue).ToList();
             Assert.AreEqual(_repositoryList.Where(x => x.ProjectId==projectIdValue).ToList().Count, result.Count);
        }

        [TestMethod()]
        public void GetDataByProjectIdPageableTest()
        {
            PagedResult<Project_Connection> expectedResult;

            _repository
                 .Setup(it => it.GetDataByProjectIdPageable(It.IsAny<Int32>(), It.IsAny<String>(), It.IsAny<Int32>(), It.IsAny<Int32>()))
                 .Returns<Int32, String, Int32, Int32>((projectId, sortExpression, page, pageSize) => 
                 { 
                      var query = _repositoryList.Where(x => x.ProjectId==projectId);
                      switch (sortExpression)
                      {
                          case  "ProjectId":
                              query = new List<Project_Connection>(query.OrderBy(q => q.ProjectId));
                              break;
                          case  "ConnectionId":
                              query = new List<Project_Connection>(query.OrderBy(q => q.ConnectionId));
                              break;                      }
                      return query.Take(pageSize).Skip((page-1)*pageSize).ToList();
                 });

            _repository
                 .Setup(it => it.GetDataByProjectIdRowCount(projectId))
                 .Returns(_repositoryList.Count);

            var result = _target.GetDataByProjectIdPageable(ProjectIdValue, "ProjectId", 1, 2);
            Assert.IsTrue(result.TryGetContentValue(out expectedResult));
            Assert.AreEqual(_repositoryList.Where(x => x.ProjectId==projectId).Take(2).ToList().Count, expectedResult.Results.Count);
            Assert.AreEqual(_repositoryList.Where(x => x.ProjectId==projectId).OrderBy(q => q.ProjectId).FirstOrDefault().ProjectId, expectedResult.Results.FirstOrDefault().ProjectId);
        }


    }
}
