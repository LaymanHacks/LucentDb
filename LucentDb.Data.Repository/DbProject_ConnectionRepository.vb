'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbProject_ConnectionRepository
        Implements IProject_ConnectionRepository
        Implements IDisposable

        Private ReadOnly _dbProject_ConnectionCommandProvider As IDbProject_ConnectionCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbProject_ConnectionCommandProvider As IDbProject_ConnectionCommandProvider)
            _dbProject_ConnectionCommandProvider = dbProject_ConnectionCommandProvider
            _dbConnHolder = _dbProject_ConnectionCommandProvider.Project_ConnectionDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of Project_Connection) Implements IProject_ConnectionRepository.GetData
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(projectId As Int32, connectionId As Int32, original_ProjectId As Int32,
                          original_ConnectionId As Int32) Implements IProject_ConnectionRepository.Update
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetUpdateDbCommand(ProjectId, ConnectionId,
                                                                                                Original_ProjectId,
                                                                                                Original_ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(project_Connection as Project_Connection, original_ProjectId As Int32,
                          original_ConnectionId As Int32) Implements IProject_ConnectionRepository.Update
            With Project_Connection
                Update(CInt(.ProjectId), CInt(.ConnectionId), CInt(Original_ProjectId), CInt(Original_ConnectionId))
            End With
        End Sub

        Public Sub Delete(projectId As Int32, connectionId As Int32) Implements IProject_ConnectionRepository.Delete
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetDeleteDbCommand(ProjectId, ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(project_Connection as Project_Connection) Implements IProject_ConnectionRepository.Delete
            With Project_Connection
                Delete(CInt(.ProjectId), CInt(.ConnectionId))
            End With
        End Sub

        Public Function Insert(projectId As Int32, connectionId As Int32) as ICollection(Of Project_Connection) _
            Implements IProject_ConnectionRepository.Insert
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetInsertDbCommand(ProjectId, ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function Insert(project_Connection as Project_Connection) as ICollection(Of Project_Connection) _
            Implements IProject_ConnectionRepository.Insert
            With Project_Connection
                Return Insert(CInt(.ProjectId), CInt(.ConnectionId))
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of Project_Connection) Implements IProject_ConnectionRepository.GetDataPageable
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetGetDataPageableDbCommand(sortExpression,
                                                                                                         page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of Project_Connection) = New PagedResult(Of Project_Connection)(page,
                                                                                                            pageSize,
                                                                                                            totalCount,
                                                                                                            entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataByProjectIdConnectionId(projectId As Int32, connectionId As Int32) _
            as ICollection(Of Project_Connection) _
            Implements IProject_ConnectionRepository.GetDataByProjectIdConnectionId
            Dim command As IDbCommand =
                    _dbProject_ConnectionCommandProvider.GetGetDataByProjectIdConnectionIdDbCommand(ProjectId,
                                                                                                    ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByConnectionId(connectionId As Int32) as ICollection(Of Project_Connection) _
            Implements IProject_ConnectionRepository.GetDataByConnectionId
            Dim command As IDbCommand =
                    _dbProject_ConnectionCommandProvider.GetGetDataByConnectionIdDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByConnectionIdPageable(connectionId As Int32, sortExpression As String, page As Int32,
                                                      pageSize As Int32) as PagedResult(Of Project_Connection) _
            Implements IProject_ConnectionRepository.GetDataByConnectionIdPageable
            Dim command As IDbCommand =
                    _dbProject_ConnectionCommandProvider.GetGetDataByConnectionIdPageableDbCommand(ConnectionId,
                                                                                                   sortExpression, page,
                                                                                                   pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByConnectionIdRowCount(connectionId)
            Dim pagedResults as PagedResult(Of Project_Connection) = New PagedResult(Of Project_Connection)(page,
                                                                                                            pageSize,
                                                                                                            totalCount,
                                                                                                            entList)
            Return pagedResults
        End Function

        Public Function GetDataByConnectionIdRowCount(connectionId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbProject_ConnectionCommandProvider.GetGetDataByConnectionIdRowCountDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataByProjectId(projectId As Int32) as ICollection(Of Project_Connection) _
            Implements IProject_ConnectionRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbProject_ConnectionCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByProjectIdPageable(projectId As Int32, sortExpression As String, page As Int32,
                                                   pageSize As Int32) as PagedResult(Of Project_Connection) _
            Implements IProject_ConnectionRepository.GetDataByProjectIdPageable
            Dim command As IDbCommand =
                    _dbProject_ConnectionCommandProvider.GetGetDataByProjectIdPageableDbCommand(ProjectId,
                                                                                                sortExpression, page,
                                                                                                pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Project_Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Project_Connection(reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByProjectIdRowCount(projectId)
            Dim pagedResults as PagedResult(Of Project_Connection) = New PagedResult(Of Project_Connection)(page,
                                                                                                            pageSize,
                                                                                                            totalCount,
                                                                                                            entList)
            Return pagedResults
        End Function

        Public Function GetDataByProjectIdRowCount(projectId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbProject_ConnectionCommandProvider.GetGetDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
