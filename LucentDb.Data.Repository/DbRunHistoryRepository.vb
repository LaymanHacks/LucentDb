'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports LucentDb.Data
Imports LucentDb.Domain.Entities
Imports LucentDb.Data.DbCommandProvider
Imports System.Collections.ObjectModel


Namespace LucentDb.Data.Repository

    <Global.System.ComponentModel.DataObjectAttribute(True)> _
    Public Class DbRunHistoryRepository
        Implements IRunHistoryRepository
        Implements IDisposable

        Private ReadOnly _dbRunHistoryCommandProvider As IDbRunHistoryCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbRunHistoryCommandProvider As IDbRunHistoryCommandProvider)
            _dbRunHistoryCommandProvider = dbRunHistoryCommandProvider
            _dbConnHolder = _dbRunHistoryCommandProvider.RunHistoryDbConnectionHolder
        End Sub

        Public Function GetData() As ICollection(Of RunHistory) Implements IRunHistoryRepository.GetData
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Sub Update(ByVal testId As Nullable(Of Int32), ByVal projectId As Nullable(Of Int32), ByVal groupId As Nullable(Of Int32), ByVal connectionId As Nullable(Of Int32), ByVal runDateTime As DateTime, ByVal totalDuration As Nullable(Of Decimal), ByVal isValid As Boolean, ByVal runLog As String, ByVal id As Int64) Implements IRunHistoryRepository.Update
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetUpdateDbCommand(TestId, ProjectId, GroupId, ConnectionId, RunDateTime, TotalDuration, IsValid, RunLog, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(ByVal runHistory As RunHistory) Implements IRunHistoryRepository.Update
            With RunHistory
                Update(.TestId, .ProjectId, .GroupId, .ConnectionId, CDate(.RunDateTime), .TotalDuration, CBool(.IsValid), .RunLog, CLng(.Id))
            End With

        End Sub
        Public Sub Delete(ByVal id As Int64) Implements IRunHistoryRepository.Delete
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(ByVal runHistory As RunHistory) Implements IRunHistoryRepository.Delete
            With RunHistory
                Delete(CLng(.Id))
            End With

        End Sub
        Public Function Insert(ByVal testId As Nullable(Of Int32), ByVal projectId As Nullable(Of Int32), ByVal groupId As Nullable(Of Int32), ByVal connectionId As Nullable(Of Int32), ByVal runDateTime As DateTime, ByVal totalDuration As Nullable(Of Decimal), ByVal isValid As Boolean, ByVal runLog As String) As Int64 Implements IRunHistoryRepository.Insert
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetInsertDbCommand(TestId, ProjectId, GroupId, ConnectionId, RunDateTime, TotalDuration, IsValid, RunLog)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int64 = Convert.ToInt64(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        Public Function Insert(ByVal runHistory As RunHistory) As Int64 Implements IRunHistoryRepository.Insert
            With RunHistory
                Return Insert(.TestId, .ProjectId, .GroupId, .ConnectionId, CDate(.RunDateTime), .TotalDuration, CBool(.IsValid), .RunLog)
            End With

        End Function
        Public Function GetDataPageable(ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of RunHistory) Implements IRunHistoryRepository.GetDataPageable
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetRowCount()
            Dim pagedResults As PagedResult(Of RunHistory) = New PagedResult(Of RunHistory)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetRowCount() As Int32
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetDataById(ByVal id As Int64) As ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataById
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetDataByProjectId(ByVal projectId As Int32) As ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetDataByProjectIdPageable(ByVal projectId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of RunHistory) Implements IRunHistoryRepository.GetDataByProjectIdPageable
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByProjectIdPageableDbCommand(ProjectId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetDataByProjectIdRowCount(projectId)
            Dim pagedResults As PagedResult(Of RunHistory) = New PagedResult(Of RunHistory)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetDataByProjectIdRowCount(ByVal projectId As Int32) As Int32
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetDataByTestId(ByVal testId As Int32) As ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataByTestId
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByTestIdDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetDataByTestIdPageable(ByVal testId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of RunHistory) Implements IRunHistoryRepository.GetDataByTestIdPageable
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByTestIdPageableDbCommand(TestId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetDataByTestIdRowCount(testId)
            Dim pagedResults As PagedResult(Of RunHistory) = New PagedResult(Of RunHistory)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetDataByTestIdRowCount(ByVal testId As Int32) As Int32
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByTestIdRowCountDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetDataByGroupId(ByVal groupId As Int32) As ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataByGroupId
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByGroupIdDbCommand(GroupId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetDataByGroupIdPageable(ByVal groupId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of RunHistory) Implements IRunHistoryRepository.GetDataByGroupIdPageable
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByGroupIdPageableDbCommand(GroupId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New RunHistory(reader.GetInt64("Id"), reader.GetNullableInt32("TestId"), reader.GetNullableInt32("ProjectId"), reader.GetNullableInt32("GroupId"), reader.GetNullableInt32("ConnectionId"), reader.GetDateTime("RunDateTime"), reader.GetNullableDecimal("TotalDuration"), reader.GetBoolean("IsValid"), reader.GetString("RunLog"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetDataByGroupIdRowCount(groupId)
            Dim pagedResults As PagedResult(Of RunHistory) = New PagedResult(Of RunHistory)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetDataByGroupIdRowCount(ByVal groupId As Int32) As Int32
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByGroupIdRowCountDbCommand(GroupId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function


#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region

    End Class
End Namespace
