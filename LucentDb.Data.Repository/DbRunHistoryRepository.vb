'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports LucentDb.Data
Imports LucentDb.Domain.Entities
Imports LucentDb.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace LucentDb.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbRunHistoryRepository
        Implements IRunHistoryRepository
        Implements IDisposable

        Private ReadOnly _dbRunHistoryCommandProvider As IDbRunHistoryCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbRunHistoryCommandProvider As IDbRunHistoryCommandProvider)
            _dbRunHistoryCommandProvider = dbRunHistoryCommandProvider
            _dbConnHolder =_dbRunHistoryCommandProvider.RunHistoryDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the RunHistory table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, true)> _ 
    Public Function GetData()  as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetData
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New RunHistory( reader.GetInt64("Id"),  reader.GetInt32("ScriptId"),  reader.GetDateTime("RunDateTime"),  reader.GetBoolean("IsPass"),  reader.GetString("ResultString") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the RunHistory table 
    ''' </summary>
   ''' <param name="ScriptId"></param>
   ''' <param name="RunDateTime"></param>
   ''' <param name="IsPass"></param>
   ''' <param name="ResultString"></param>
   ''' <param name="Id"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal scriptId As Int32,  ByVal runDateTime As DateTime,  ByVal isPass As Boolean,  ByVal resultString As String,  ByVal id As Int64)  Implements IRunHistoryRepository.Update
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetUpdateDbCommand(ScriptId, RunDateTime, IsPass, ResultString, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the RunHistory table 
    ''' </summary>
    ''' <param name="RunHistory"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal runHistory as RunHistory)  Implements IRunHistoryRepository.Update
             With RunHistory
Update( CInt(.ScriptId),  CDate(.RunDateTime),  CBool(.IsPass), .ResultString,  CLng(.Id))
       End With

    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the RunHistory table 
    ''' </summary>
   ''' <param name="Id"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal id As Int64)  Implements IRunHistoryRepository.Delete
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the RunHistory table 
    ''' </summary>
    ''' <param name="RunHistory"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal runHistory as RunHistory)  Implements IRunHistoryRepository.Delete
             With RunHistory
Delete( CLng(.Id))
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of RunHistory into the database.
    ''' </summary>
   ''' <param name="ScriptId"></param>
   ''' <param name="RunDateTime"></param>
   ''' <param name="IsPass"></param>
   ''' <param name="ResultString"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal scriptId As Int32,  ByVal runDateTime As DateTime,  ByVal isPass As Boolean,  ByVal resultString As String)  as Int64 Implements IRunHistoryRepository.Insert
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetInsertDbCommand(ScriptId, RunDateTime, IsPass, ResultString)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int64  = Convert.ToInt64(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Inserts an entity of RunHistory into the database.
    ''' </summary>
    ''' <param name="RunHistory"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal runHistory as RunHistory)  as Int64 Implements IRunHistoryRepository.Insert
             With RunHistory
 Return Insert( CInt(.ScriptId),  CDate(.RunDateTime),  CBool(.IsPass), .ResultString)
       End With

    End Function
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from RunHistory
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataPageable
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New RunHistory( reader.GetInt64("Id"),  reader.GetInt32("ScriptId"),  reader.GetDateTime("RunDateTime"),  reader.GetBoolean("IsPass"),  reader.GetString("ResultString") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for RunHistory
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, false)> _ 
    Public Function GetRowCount()  as Int32 Implements IRunHistoryRepository.GetRowCount
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function  GetDataById returns a IDataReader for RunHistory
    ''' </summary>
   ''' <param name="Id"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, false)> _ 
    Public Function GetDataById( ByVal id As Int64)  as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataById
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New RunHistory( reader.GetInt64("Id"),  reader.GetInt32("ScriptId"),  reader.GetDateTime("RunDateTime"),  reader.GetBoolean("IsPass"),  reader.GetString("ResultString") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByScriptId returns a IDataReader for RunHistory
    ''' </summary>
   ''' <param name="ScriptId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, false)> _ 
    Public Function GetDataByScriptId( ByVal scriptId As Int32)  as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataByScriptId
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByScriptIdDbCommand(ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New RunHistory( reader.GetInt64("Id"),  reader.GetInt32("ScriptId"),  reader.GetDateTime("RunDateTime"),  reader.GetBoolean("IsPass"),  reader.GetString("ResultString") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByScriptIdPageable returns a IDataReader populated with a subset of data from RunHistory
    ''' </summary>
   ''' <param name="ScriptId"></param>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, false)> _ 
    Public Function GetDataByScriptIdPageable( ByVal scriptId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataByScriptIdPageable
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByScriptIdPageableDbCommand(ScriptId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New RunHistory( reader.GetInt64("Id"),  reader.GetInt32("ScriptId"),  reader.GetDateTime("RunDateTime"),  reader.GetBoolean("IsPass"),  reader.GetString("ResultString") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for RunHistory
    ''' </summary>
   ''' <param name="ScriptId"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Select, false)> _ 
    Public Function GetDataByScriptIdRowCount( ByVal scriptId As Int32)  as Int32 Implements IRunHistoryRepository.GetDataByScriptIdRowCount
        Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByScriptIdRowCountDbCommand(ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
