'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbRunHistoryRepository
        Implements IRunHistoryRepository
        Implements IDisposable

        Private ReadOnly _dbRunHistoryCommandProvider As IDbRunHistoryCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbRunHistoryCommandProvider As IDbRunHistoryCommandProvider)
            _dbRunHistoryCommandProvider = dbRunHistoryCommandProvider
            _dbConnHolder = _dbRunHistoryCommandProvider.RunHistoryDbConnectionHolder
        End Sub


        ''' <summary>
        '''     Selects one or more records from the RunHistory table
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetData() as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetData
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistory(reader.GetInt64("Id"), reader.GetInt32("TestId"),
                                       reader.GetDateTime("RunDateTime"), reader.GetBoolean("IsPass"),
                                       reader.GetString("RunLog"), reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Updates one or more records from the RunHistory table
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="RunDateTime"></param>
        ''' <param name="IsPass"></param>
        ''' <param name="RunLog"></param>
        ''' <param name="ResultString"></param>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, true)>
        Public Sub Update(testId As Int32, runDateTime As DateTime, isPass As Boolean, runLog As String,
                          resultString As String, id As Int64) Implements IRunHistoryRepository.Update
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetUpdateDbCommand(TestId, RunDateTime, IsPass,
                                                                                        RunLog, ResultString, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Updates one or more records from the RunHistory table
        ''' </summary>
        ''' <param name="RunHistory"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, False)>
        Public Sub Update(runHistory as RunHistory) Implements IRunHistoryRepository.Update
            With RunHistory
                Update(CInt(.TestId), CDate(.RunDateTime), CBool(.IsPass), .RunLog, .ResultString, CLng(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the RunHistory table
        ''' </summary>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, true)>
        Public Sub Delete(id As Int64) Implements IRunHistoryRepository.Delete
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the RunHistory table
        ''' </summary>
        ''' <param name="RunHistory"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, False)>
        Public Sub Delete(runHistory as RunHistory) Implements IRunHistoryRepository.Delete
            With RunHistory
                Delete(CLng(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Inserts an entity of RunHistory into the database.
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="RunDateTime"></param>
        ''' <param name="IsPass"></param>
        ''' <param name="RunLog"></param>
        ''' <param name="ResultString"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, true)>
        Public Function Insert(testId As Int32, runDateTime As DateTime, isPass As Boolean, runLog As String,
                               resultString As String) as Int64 Implements IRunHistoryRepository.Insert
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetInsertDbCommand(TestId, RunDateTime, IsPass,
                                                                                        RunLog, ResultString)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int64 = Convert.ToInt64(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Inserts an entity of RunHistory into the database.
        ''' </summary>
        ''' <param name="RunHistory"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, False)>
        Public Function Insert(runHistory as RunHistory) as Int64 Implements IRunHistoryRepository.Insert
            With RunHistory
                Return Insert(CInt(.TestId), CDate(.RunDateTime), CBool(.IsPass), .RunLog, .ResultString)
            End With
        End Function

        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of RunHistory) Implements IRunHistoryRepository.GetDataPageable
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                                 pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistory(reader.GetInt64("Id"), reader.GetInt32("TestId"),
                                       reader.GetDateTime("RunDateTime"), reader.GetBoolean("IsPass"),
                                       reader.GetString("RunLog"), reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetRowCount() as Int32 Implements IRunHistoryRepository.GetRowCount
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function  GetDataById returns a IDataReader for RunHistory
        ''' </summary>
        ''' <param name="Id"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataById(id As Int64) as ICollection(Of RunHistory) _
            Implements IRunHistoryRepository.GetDataById
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistory(reader.GetInt64("Id"), reader.GetInt32("TestId"),
                                       reader.GetDateTime("RunDateTime"), reader.GetBoolean("IsPass"),
                                       reader.GetString("RunLog"), reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByTestId returns a IDataReader for RunHistory
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestId(testId As Int32) as ICollection(Of RunHistory) _
            Implements IRunHistoryRepository.GetDataByTestId
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByTestIdDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistory(reader.GetInt64("Id"), reader.GetInt32("TestId"),
                                       reader.GetDateTime("RunDateTime"), reader.GetBoolean("IsPass"),
                                       reader.GetString("RunLog"), reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByTestIdPageable returns a IDataReader populated with a subset of data from RunHistory
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdPageable(testId As Int32, sortExpression As String, page As Int32,
                                                pageSize As Int32) as ICollection(Of RunHistory) _
            Implements IRunHistoryRepository.GetDataByTestIdPageable
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByTestIdPageableDbCommand(TestId,
                                                                                                         sortExpression,
                                                                                                         page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistory(reader.GetInt64("Id"), reader.GetInt32("TestId"),
                                       reader.GetDateTime("RunDateTime"), reader.GetBoolean("IsPass"),
                                       reader.GetString("RunLog"), reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for RunHistory
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdRowCount(testId As Int32) as Int32 _
            Implements IRunHistoryRepository.GetDataByTestIdRowCount
            Dim command As IDbCommand = _dbRunHistoryCommandProvider.GetGetDataByTestIdRowCountDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
