'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbExpectedResultRepository
        Implements IExpectedResultRepository
        Implements IDisposable

        Private ReadOnly _dbExpectedResultCommandProvider As IDbExpectedResultCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbExpectedResultCommandProvider As IDbExpectedResultCommandProvider)
            _dbExpectedResultCommandProvider = dbExpectedResultCommandProvider
            _dbConnHolder = _dbExpectedResultCommandProvider.ExpectedResultDbConnectionHolder
        End Sub


        ''' <summary>
        '''     Selects one or more records from the ExpectedResult table
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetData() as ICollection(Of ExpectedResult) Implements IExpectedResultRepository.GetData
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Updates one or more records from the ExpectedResult table
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="ExpectedValue"></param>
        ''' <param name="AssertTypeId"></param>
        ''' <param name="ResultIndex"></param>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, true)>
        Public Sub Update(testId As Int32, expectedValue As String, assertTypeId As Nullable(Of Int32),
                          resultIndex As Int32, id As Int32) Implements IExpectedResultRepository.Update
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetUpdateDbCommand(TestId, ExpectedValue,
                                                                                            AssertTypeId, ResultIndex,
                                                                                            Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Updates one or more records from the ExpectedResult table
        ''' </summary>
        ''' <param name="ExpectedResult"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, False)>
        Public Sub Update(expectedResult as ExpectedResult) Implements IExpectedResultRepository.Update
            With ExpectedResult
                Update(CInt(.TestId), .ExpectedValue, .AssertTypeId, CInt(.ResultIndex), CInt(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the ExpectedResult table
        ''' </summary>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, true)>
        Public Sub Delete(id As Int32) Implements IExpectedResultRepository.Delete
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the ExpectedResult table
        ''' </summary>
        ''' <param name="ExpectedResult"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, False)>
        Public Sub Delete(expectedResult as ExpectedResult) Implements IExpectedResultRepository.Delete
            With ExpectedResult
                Delete(CInt(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Inserts an entity of ExpectedResult into the database.
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="ExpectedValue"></param>
        ''' <param name="AssertTypeId"></param>
        ''' <param name="ResultIndex"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, true)>
        Public Function Insert(testId As Int32, expectedValue As String, assertTypeId As Nullable(Of Int32),
                               resultIndex As Int32) as Int32 Implements IExpectedResultRepository.Insert
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetInsertDbCommand(TestId, ExpectedValue,
                                                                                            AssertTypeId, ResultIndex)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Inserts an entity of ExpectedResult into the database.
        ''' </summary>
        ''' <param name="ExpectedResult"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, False)>
        Public Function Insert(expectedResult as ExpectedResult) as Int32 Implements IExpectedResultRepository.Insert
            With ExpectedResult
                Return Insert(CInt(.TestId), .ExpectedValue, .AssertTypeId, CInt(.ResultIndex))
            End With
        End Function

        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from ExpectedResult
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of ExpectedResult) Implements IExpectedResultRepository.GetDataPageable
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataPageableDbCommand(sortExpression,
                                                                                                     page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for ExpectedResult
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetRowCount() as Int32 Implements IExpectedResultRepository.GetRowCount
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function  GetDataById returns a IDataReader for ExpectedResult
        ''' </summary>
        ''' <param name="Id"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataById(id As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataById
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByAssertTypeId returns a IDataReader for ExpectedResult
        ''' </summary>
        ''' <param name="AssertTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByAssertTypeId(assertTypeId As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByAssertTypeId
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByAssertTypeIdDbCommand(AssertTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByAssertTypeIdPageable returns a IDataReader populated with a subset of data from ExpectedResult
        ''' </summary>
        ''' <param name="AssertTypeId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByAssertTypeIdPageable(assertTypeId As Int32, sortExpression As String, page As Int32,
                                                      pageSize As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByAssertTypeIdPageable
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByAssertTypeIdPageableDbCommand(AssertTypeId,
                                                                                               sortExpression, page,
                                                                                               pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for ExpectedResult
        ''' </summary>
        ''' <param name="AssertTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByAssertTypeIdRowCount(assertTypeId As Int32) as Int32 _
            Implements IExpectedResultRepository.GetDataByAssertTypeIdRowCount
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByAssertTypeIdRowCountDbCommand(AssertTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetDataByTestId returns a IDataReader for ExpectedResult
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestId(testId As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByTestId
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByTestIdDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByTestIdPageable returns a IDataReader populated with a subset of data from ExpectedResult
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdPageable(testId As Int32, sortExpression As String, page As Int32,
                                                pageSize As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByTestIdPageable
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByTestIdPageableDbCommand(TestId,
                                                                                                             sortExpression,
                                                                                                             page,
                                                                                                             pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetString("ExpectedValue"), reader.GetNullableInt32("AssertTypeId"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for ExpectedResult
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdRowCount(testId As Int32) as Int32 _
            Implements IExpectedResultRepository.GetDataByTestIdRowCount
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByTestIdRowCountDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
