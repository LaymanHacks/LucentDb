'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbExpectedResultRepository
        Implements IExpectedResultRepository
        Implements IDisposable

        Private ReadOnly _dbExpectedResultCommandProvider As IDbExpectedResultCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbExpectedResultCommandProvider As IDbExpectedResultCommandProvider)
            _dbExpectedResultCommandProvider = dbExpectedResultCommandProvider
            _dbConnHolder = _dbExpectedResultCommandProvider.ExpectedResultDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of ExpectedResult) Implements IExpectedResultRepository.GetData
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(testId As Int32, expectedResultTypeId As Nullable(Of Int32),
                          assertTypeId As Nullable(Of Int32), expectedValue As String, resultIndex As Int32, id As Int32) _
            Implements IExpectedResultRepository.Update
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetUpdateDbCommand(TestId, ExpectedResultTypeId,
                                                                                            AssertTypeId, ExpectedValue,
                                                                                            ResultIndex, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(expectedResult as ExpectedResult) Implements IExpectedResultRepository.Update
            With ExpectedResult
                Update(CInt(.TestId), .ExpectedResultTypeId, .AssertTypeId, .ExpectedValue, CInt(.ResultIndex),
                       CInt(.Id))
            End With
        End Sub

        Public Sub Delete(id As Int32) Implements IExpectedResultRepository.Delete
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(expectedResult as ExpectedResult) Implements IExpectedResultRepository.Delete
            With ExpectedResult
                Delete(CInt(.Id))
            End With
        End Sub

        Public Function Insert(testId As Int32, expectedResultTypeId As Nullable(Of Int32),
                               assertTypeId As Nullable(Of Int32), expectedValue As String, resultIndex As Int32) _
            as Int32 Implements IExpectedResultRepository.Insert
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetInsertDbCommand(TestId, ExpectedResultTypeId,
                                                                                            AssertTypeId, ExpectedValue,
                                                                                            ResultIndex)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function Insert(expectedResult as ExpectedResult) as Int32 Implements IExpectedResultRepository.Insert
            With ExpectedResult
                Return Insert(CInt(.TestId), .ExpectedResultTypeId, .AssertTypeId, .ExpectedValue, CInt(.ResultIndex))
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of ExpectedResult) Implements IExpectedResultRepository.GetDataPageable
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataPageableDbCommand(sortExpression,
                                                                                                     page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of ExpectedResult) = New PagedResult(Of ExpectedResult)(page, pageSize,
                                                                                                    totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataById(id As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataById
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByAssertTypeId(assertTypeId As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByAssertTypeId
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByAssertTypeIdDbCommand(AssertTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByAssertTypeIdPageable(assertTypeId As Int32, sortExpression As String, page As Int32,
                                                      pageSize As Int32) as PagedResult(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByAssertTypeIdPageable
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByAssertTypeIdPageableDbCommand(AssertTypeId,
                                                                                               sortExpression, page,
                                                                                               pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByAssertTypeIdRowCount(assertTypeId)
            Dim pagedResults as PagedResult(Of ExpectedResult) = New PagedResult(Of ExpectedResult)(page, pageSize,
                                                                                                    totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetDataByAssertTypeIdRowCount(assertTypeId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByAssertTypeIdRowCountDbCommand(AssertTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataByExpectedResultTypeId(expectedResultTypeId As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByExpectedResultTypeId
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByExpectedResultTypeIdDbCommand(ExpectedResultTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByExpectedResultTypeIdPageable(expectedResultTypeId As Int32, sortExpression As String,
                                                              page As Int32, pageSize As Int32) _
            as PagedResult(Of ExpectedResult) Implements IExpectedResultRepository.GetDataByExpectedResultTypeIdPageable
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByExpectedResultTypeIdPageableDbCommand(
                        ExpectedResultTypeId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByExpectedResultTypeIdRowCount(expectedResultTypeId)
            Dim pagedResults as PagedResult(Of ExpectedResult) = New PagedResult(Of ExpectedResult)(page, pageSize,
                                                                                                    totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetDataByExpectedResultTypeIdRowCount(expectedResultTypeId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbExpectedResultCommandProvider.GetGetDataByExpectedResultTypeIdRowCountDbCommand(
                        ExpectedResultTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataByTestId(testId As Int32) as ICollection(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByTestId
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByTestIdDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByTestIdPageable(testId As Int32, sortExpression As String, page As Int32,
                                                pageSize As Int32) as PagedResult(Of ExpectedResult) _
            Implements IExpectedResultRepository.GetDataByTestIdPageable
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByTestIdPageableDbCommand(TestId,
                                                                                                             sortExpression,
                                                                                                             page,
                                                                                                             pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResult)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New ExpectedResult(reader.GetInt32("Id"), reader.GetInt32("TestId"),
                                           reader.GetNullableInt32("ExpectedResultTypeId"),
                                           reader.GetNullableInt32("AssertTypeId"), reader.GetString("ExpectedValue"),
                                           reader.GetInt32("ResultIndex"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByTestIdRowCount(testId)
            Dim pagedResults as PagedResult(Of ExpectedResult) = New PagedResult(Of ExpectedResult)(page, pageSize,
                                                                                                    totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetDataByTestIdRowCount(testId As Int32) as Int32
            Dim command As IDbCommand = _dbExpectedResultCommandProvider.GetGetDataByTestIdRowCountDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
