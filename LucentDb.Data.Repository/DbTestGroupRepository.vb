'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbTestGroupRepository
        Implements ITestGroupRepository
        Implements IDisposable

        Private ReadOnly _dbTestGroupCommandProvider As IDbTestGroupCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbTestGroupCommandProvider As IDbTestGroupCommandProvider)
            _dbTestGroupCommandProvider = dbTestGroupCommandProvider
            _dbConnHolder = _dbTestGroupCommandProvider.TestGroupDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of TestGroup) Implements ITestGroupRepository.GetData
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(projectId As Int32, name As String, isActive As Boolean, id As Int32) _
            Implements ITestGroupRepository.Update
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetUpdateDbCommand(ProjectId, Name, IsActive, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(testGroup as TestGroup) Implements ITestGroupRepository.Update
            With TestGroup
                Update(CInt(.ProjectId), CStr(.Name), CBool(.IsActive), CInt(.Id))
            End With
        End Sub

        Public Sub Delete(id As Int32) Implements ITestGroupRepository.Delete
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(testGroup as TestGroup) Implements ITestGroupRepository.Delete
            With TestGroup
                Delete(CInt(.Id))
            End With
        End Sub

        Public Function Insert(projectId As Int32, name As String, isActive As Boolean) as Int32 _
            Implements ITestGroupRepository.Insert
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetInsertDbCommand(ProjectId, Name, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function Insert(testGroup as TestGroup) as Int32 Implements ITestGroupRepository.Insert
            With TestGroup
                Return Insert(CInt(.ProjectId), CStr(.Name), CBool(.IsActive))
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of TestGroup) Implements ITestGroupRepository.GetDataPageable
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                                pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of TestGroup) = New PagedResult(Of TestGroup)(page, pageSize, totalCount,
                                                                                          entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataById(id As Int32) as ICollection(Of TestGroup) _
            Implements ITestGroupRepository.GetDataById
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveData() as ICollection(Of TestGroup) Implements ITestGroupRepository.GetActiveData
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of TestGroup) Implements ITestGroupRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression,
                                                                                                      page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetActiveDataRowCount()
            Dim pagedResults as PagedResult(Of TestGroup) = New PagedResult(Of TestGroup)(page, pageSize, totalCount,
                                                                                          entList)
            Return pagedResults
        End Function

        Public Function GetActiveDataRowCount() as Int32
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataByProjectId(projectId As Int32) as ICollection(Of TestGroup) _
            Implements ITestGroupRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByProjectIdPageable(projectId As Int32, sortExpression As String, page As Int32,
                                                   pageSize As Int32) as PagedResult(Of TestGroup) _
            Implements ITestGroupRepository.GetDataByProjectIdPageable
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetDataByProjectIdPageableDbCommand(ProjectId,
                                                                                                           sortExpression,
                                                                                                           page,
                                                                                                           pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByProjectIdRowCount(projectId)
            Dim pagedResults as PagedResult(Of TestGroup) = New PagedResult(Of TestGroup)(page, pageSize, totalCount,
                                                                                          entList)
            Return pagedResults
        End Function

        Public Function GetDataByProjectIdRowCount(projectId As Int32) as Int32
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetActiveDataByProjectId(projectId As Int32) as ICollection(Of TestGroup) _
            Implements ITestGroupRepository.GetActiveDataByProjectId
            Dim command As IDbCommand = _dbTestGroupCommandProvider.GetGetActiveDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveDataByProjectIdPageable(projectId As Int32, sortExpression As String, page As Int32,
                                                         pageSize As Int32) as PagedResult(Of TestGroup) _
            Implements ITestGroupRepository.GetActiveDataByProjectIdPageable
            Dim command As IDbCommand =
                    _dbTestGroupCommandProvider.GetGetActiveDataByProjectIdPageableDbCommand(ProjectId, sortExpression,
                                                                                             page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestGroup)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestGroup(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetString("Name"),
                                      reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetActiveDataByProjectIdRowCount(projectId)
            Dim pagedResults as PagedResult(Of TestGroup) = New PagedResult(Of TestGroup)(page, pageSize, totalCount,
                                                                                          entList)
            Return pagedResults
        End Function

        Public Function GetActiveDataByProjectIdRowCount(projectId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbTestGroupCommandProvider.GetGetActiveDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
