'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbConnectionRepository
        Implements IConnectionRepository
        Implements IDisposable

        Private ReadOnly _dbConnectionCommandProvider As IDbConnectionCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbConnectionCommandProvider As IDbConnectionCommandProvider)
            _dbConnectionCommandProvider = dbConnectionCommandProvider
            _dbConnHolder = _dbConnectionCommandProvider.ConnectionDbConnectionHolder
        End Sub


        ''' <summary>
        '''     Selects one or more records from the Connection table
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetData() as ICollection(Of Connection) Implements IConnectionRepository.GetData
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Updates one or more records from the Connection table
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ConnectionString"></param>
        ''' <param name="IsActive"></param>
        ''' <param name="ConnectionId"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, true)>
        Public Sub Update(name As String, connectionString As String, isActive As Boolean, connectionId As Int32) _
            Implements IConnectionRepository.Update
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetUpdateDbCommand(Name, ConnectionString, IsActive,
                                                                                        ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Updates one or more records from the Connection table
        ''' </summary>
        ''' <param name="Connection"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, False)>
        Public Sub Update(connection as Connection) Implements IConnectionRepository.Update
            With Connection
                Update(.Name, .ConnectionString, CBool(.IsActive), CInt(.ConnectionId))
            End With
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Connection table
        ''' </summary>
        ''' <param name="ConnectionId"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, true)>
        Public Sub Delete(connectionId As Int32) Implements IConnectionRepository.Delete
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetDeleteDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Connection table
        ''' </summary>
        ''' <param name="Connection"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, False)>
        Public Sub Delete(connection as Connection) Implements IConnectionRepository.Delete
            With Connection
                Delete(CInt(.ConnectionId))
            End With
        End Sub

        ''' <summary>
        '''     Inserts an entity of Connection into the database.
        ''' </summary>
        ''' <param name="Name"></param>
        ''' <param name="ConnectionString"></param>
        ''' <param name="IsActive"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, true)>
        Public Function Insert(name As String, connectionString As String, isActive As Boolean) as Int32 _
            Implements IConnectionRepository.Insert
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetInsertDbCommand(Name, ConnectionString, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Inserts an entity of Connection into the database.
        ''' </summary>
        ''' <param name="Connection"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, False)>
        Public Function Insert(connection as Connection) as Int32 Implements IConnectionRepository.Insert
            With Connection
                Return Insert(.Name, .ConnectionString, CBool(.IsActive))
            End With
        End Function

        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from Connection
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of Connection) Implements IConnectionRepository.GetDataPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                                 pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Connection
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetRowCount() as Int32 Implements IConnectionRepository.GetRowCount
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function  GetDataByConnectionId returns a IDataReader for Connection
        ''' </summary>
        ''' <param name="ConnectionId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByConnectionId(connectionId As Int32) as ICollection(Of Connection) _
            Implements IConnectionRepository.GetDataByConnectionId
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByConnectionIdDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveData returns a ConnectionList for Connection with records that are marked as active
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetActiveData() as ICollection(Of Connection) Implements IConnectionRepository.GetActiveData
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataPageable returns a ConnectionList populated with paged active records from Connection
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of Connection) Implements IConnectionRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression,
                                                                                                       page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataRowCount returns the row count for Connection
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataRowCount() as Int32 Implements IConnectionRepository.GetActiveDataRowCount
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetConnectionsForProjectByProjectId returns a Project
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetConnectionsForProjectByProjectId(projectId As Int32) as ICollection(Of Connection) _
            Implements IConnectionRepository.GetConnectionsForProjectByProjectId
            Dim command As IDbCommand =
                    _dbConnectionCommandProvider.GetGetConnectionsForProjectByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetConnectionsForProjectByProjectId returns a Project
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetConnectionsForProjectByProjectIdPageable(projectId As Int32, sortExpression As String,
                                                                    page As Int32, pageSize As Int32) _
            as ICollection(Of Connection) Implements IConnectionRepository.GetConnectionsForProjectByProjectIdPageable
            Dim command As IDbCommand =
                    _dbConnectionCommandProvider.GetGetConnectionsForProjectByProjectIdPageableDbCommand(ProjectId,
                                                                                                         sortExpression,
                                                                                                         page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Connection(reader.GetInt32("ConnectionId"), reader.GetString("Name"),
                                       reader.GetString("ConnectionString"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetConnectionsForProjectByProjectIdRowCount returns the row count for Connection
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetConnectionsForProjectByProjectIdRowCount(projectId As Int32) as Int32 _
            Implements IConnectionRepository.GetConnectionsForProjectByProjectIdRowCount
            Dim command As IDbCommand =
                    _dbConnectionCommandProvider.GetGetConnectionsForProjectByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
