'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports LucentDb.Data
Imports LucentDb.Domain.Entities
Imports LucentDb.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace LucentDb.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbConnectionRepository
        Implements IConnectionRepository
        Implements IDisposable

        Private ReadOnly _dbConnectionCommandProvider As IDbConnectionCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbConnectionCommandProvider As IDbConnectionCommandProvider)
            _dbConnectionCommandProvider = dbConnectionCommandProvider
            _dbConnHolder =_dbConnectionCommandProvider.ConnectionDbConnectionHolder
        End Sub

              Public Function GetData()  as ICollection(Of Connection) Implements IConnectionRepository.GetData
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
        Public Sub Update(ByVal projectId As Int32, ByVal connectionProviderId As Int32, ByVal name As String, ByVal connectionString As String, ByVal isDefault As Boolean, ByVal isActive As Boolean, ByVal connectionId As Int32) Implements IConnectionRepository.Update
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetUpdateDbCommand(projectId, connectionProviderId, name, connectionString, isDefault, isActive, connectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub
  
    Public Sub Update(ByVal connection as Connection)  Implements IConnectionRepository.Update
             With Connection
Update(.ProjectId(),  CInt(.ConnectionProviderId), .Name, .ConnectionString,  CBool(.IsDefault),  CBool(.IsActive),  CInt(.ConnectionId))
       End With

    End Sub
          Public Sub Delete( ByVal connectionId As Int32)  Implements IConnectionRepository.Delete
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetDeleteDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    Public Sub Delete(ByVal connection as Connection)  Implements IConnectionRepository.Delete
             With Connection
Delete( CInt(.ConnectionId))
       End With

    End Sub
          Public Function Insert( ByVal projectId As  Nullable(Of Int32) ,  ByVal connectionProviderId As Int32,  ByVal name As String,  ByVal connectionString As String,  ByVal isDefault As Boolean,  ByVal isActive As Boolean)  as Int32 Implements IConnectionRepository.Insert
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetInsertDbCommand(ProjectId, ConnectionProviderId, Name, ConnectionString, IsDefault, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    Public Function Insert(ByVal connection as Connection)  as Int32 Implements IConnectionRepository.Insert
             With Connection
 Return Insert(.ProjectId(),  CInt(.ConnectionProviderId), .Name, .ConnectionString,  CBool(.IsDefault),  CBool(.IsActive))
       End With

    End Function
          Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Connection) Implements IConnectionRepository.GetDataPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetRowCount()
            Dim pagedResults As PagedResult(Of Connection) = New PagedResult(Of Connection)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetRowCount() As Int32
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetDataByConnectionId(ByVal connectionId As Int32) As ICollection(Of Connection) Implements IConnectionRepository.GetDataByConnectionId
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByConnectionIdDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetActiveData() As ICollection(Of Connection) Implements IConnectionRepository.GetActiveData
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetActiveDataPageable(ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of Connection) Implements IConnectionRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetActiveDataRowCount()
            Dim pagedResults As PagedResult(Of Connection) = New PagedResult(Of Connection)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetActiveDataRowCount() As Int32
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetDataByConnectionProviderId(ByVal connectionProviderId As Int32) As ICollection(Of Connection) Implements IConnectionRepository.GetDataByConnectionProviderId
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByConnectionProviderIdDbCommand(ConnectionProviderId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetDataByConnectionProviderIdPageable(ByVal connectionProviderId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of Connection) Implements IConnectionRepository.GetDataByConnectionProviderIdPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByConnectionProviderIdPageableDbCommand(ConnectionProviderId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetDataByConnectionProviderIdRowCount(connectionProviderId)
            Dim pagedResults As PagedResult(Of Connection) = New PagedResult(Of Connection)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetDataByConnectionProviderIdRowCount(ByVal connectionProviderId As Int32) As Int32
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByConnectionProviderIdRowCountDbCommand(ConnectionProviderId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetActiveDataByConnectionProviderId(ByVal connectionProviderId As Int32) As ICollection(Of Connection) Implements IConnectionRepository.GetActiveDataByConnectionProviderId
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataByConnectionProviderIdDbCommand(ConnectionProviderId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetActiveDataByConnectionProviderIdPageable(ByVal connectionProviderId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of Connection) Implements IConnectionRepository.GetActiveDataByConnectionProviderIdPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataByConnectionProviderIdPageableDbCommand(ConnectionProviderId, sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetActiveDataByConnectionProviderIdRowCount(connectionProviderId)
            Dim pagedResults As PagedResult(Of Connection) = New PagedResult(Of Connection)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetActiveDataByConnectionProviderIdRowCount(ByVal connectionProviderId As Int32) As Int32
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataByConnectionProviderIdRowCountDbCommand(ConnectionProviderId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetDataByProjectId(ByVal projectId As Int32) As ICollection(Of Connection) Implements IConnectionRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetDataByProjectIdPageable(ByVal projectId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of Connection) Implements IConnectionRepository.GetDataByProjectIdPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByProjectIdPageableDbCommand(ProjectId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetDataByProjectIdRowCount(projectId)
            Dim pagedResults As PagedResult(Of Connection) = New PagedResult(Of Connection)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
        Public Function GetDataByProjectIdRowCount(ByVal projectId As Int32) As Int32
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function
        Public Function GetActiveDataByProjectId(ByVal projectId As Int32) As ICollection(Of Connection) Implements IConnectionRepository.GetActiveDataByProjectId
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
        Public Function GetActiveDataByProjectIdPageable(ByVal projectId As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As PagedResult(Of Connection) Implements IConnectionRepository.GetActiveDataByProjectIdPageable
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataByProjectIdPageableDbCommand(ProjectId, sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Connection)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Connection(reader.GetInt32("ConnectionId"), reader.GetInt32("ProjectId"), reader.GetInt32("ConnectionProviderId"), reader.GetString("Name"), reader.GetString("ConnectionString"), reader.GetBoolean("IsDefault"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Dim totalCount As Int64 = GetActiveDataByProjectIdRowCount(projectId)
            Dim pagedResults As PagedResult(Of Connection) = New PagedResult(Of Connection)(page, pageSize, totalCount, entList)
            Return pagedResults

        End Function
          Public Function GetActiveDataByProjectIdRowCount( ByVal projectId As Int32)  as Int32
            Dim command As IDbCommand = _dbConnectionCommandProvider.GetGetActiveDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
