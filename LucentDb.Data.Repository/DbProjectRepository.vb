'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports LucentDb.Data
Imports LucentDb.Domain.Entities
Imports LucentDb.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace LucentDb.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbProjectRepository
        Implements IProjectRepository
        Implements IDisposable

        Private ReadOnly _dbProjectCommandProvider As IDbProjectCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbProjectCommandProvider As IDbProjectCommandProvider)
            _dbProjectCommandProvider = dbProjectCommandProvider
            _dbConnHolder =_dbProjectCommandProvider.ProjectDbConnectionHolder
        End Sub

              Public Function GetData()  as ICollection(Of Project) Implements IProjectRepository.GetData
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Sub Update( ByVal name As String,  ByVal isActive As Boolean,  ByVal projectId As Int32)  Implements IProjectRepository.Update
            Dim command As IDbCommand = _dbProjectCommandProvider.GetUpdateDbCommand(Name, IsActive, ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    Public Sub Update(ByVal project as Project)  Implements IProjectRepository.Update
             With Project
Update(.Name,  CBool(.IsActive),  CInt(.ProjectId))
       End With

    End Sub
          Public Sub Delete( ByVal projectId As Int32)  Implements IProjectRepository.Delete
            Dim command As IDbCommand = _dbProjectCommandProvider.GetDeleteDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    Public Sub Delete(ByVal project as Project)  Implements IProjectRepository.Delete
             With Project
Delete( CInt(.ProjectId))
       End With

    End Sub
          Public Function Insert( ByVal name As String,  ByVal isActive As Boolean)  as Int32 Implements IProjectRepository.Insert
            Dim command As IDbCommand = _dbProjectCommandProvider.GetInsertDbCommand(Name, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    Public Function Insert(ByVal project as Project)  as Int32 Implements IProjectRepository.Insert
             With Project
 Return Insert(.Name,  CBool(.IsActive))
       End With

    End Function
          Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Project) Implements IProjectRepository.GetDataPageable
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of Project) = New PagedResult(Of Project)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetRowCount()  as Int32
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetDataByProjectId( ByVal projectId As Int32)  as ICollection(Of Project) Implements IProjectRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveData()  as ICollection(Of Project) Implements IProjectRepository.GetActiveData
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Project) Implements IProjectRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetActiveDataRowCount()
            Dim pagedResults as PagedResult(Of Project) = New PagedResult(Of Project)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetActiveDataRowCount()  as Int32
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetProjectsForConnectionByConnectionId( ByVal connectionId As Int32)  as ICollection(Of Project) Implements IProjectRepository.GetProjectsForConnectionByConnectionId
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetProjectsForConnectionByConnectionIdDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetProjectsForConnectionByConnectionIdPageable( ByVal connectionId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Project) Implements IProjectRepository.GetProjectsForConnectionByConnectionIdPageable
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetProjectsForConnectionByConnectionIdPageableDbCommand(ConnectionId, sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Project)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Project( reader.GetInt32("ProjectId"),  reader.GetString("Name") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetProjectsForConnectionByConnectionIdRowCount(connectionId)
            Dim pagedResults as PagedResult(Of Project) = New PagedResult(Of Project)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetProjectsForConnectionByConnectionIdRowCount( ByVal connectionId As Int32)  as Int32
            Dim command As IDbCommand = _dbProjectCommandProvider.GetGetProjectsForConnectionByConnectionIdRowCountDbCommand(ConnectionId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
