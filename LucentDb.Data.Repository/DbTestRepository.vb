'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports LucentDb.Data
Imports LucentDb.Domain.Entities
Imports LucentDb.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace LucentDb.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbTestRepository
        Implements ITestRepository
        Implements IDisposable

        Private ReadOnly _dbTestCommandProvider As IDbTestCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbTestCommandProvider As IDbTestCommandProvider)
            _dbTestCommandProvider = dbTestCommandProvider
            _dbConnHolder =_dbTestCommandProvider.TestDbConnectionHolder
        End Sub

              Public Function GetData()  as ICollection(Of Test) Implements ITestRepository.GetData
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Sub Update( ByVal testTypeId As Int32,  ByVal projectId As  Nullable(Of Int32) ,  ByVal groupId As  Nullable(Of Int32) ,  ByVal name As String,  ByVal testValue As String,  ByVal isActive As Boolean,  ByVal id As Int32)  Implements ITestRepository.Update
            Dim command As IDbCommand = _dbTestCommandProvider.GetUpdateDbCommand(TestTypeId, ProjectId, GroupId, Name, TestValue, IsActive, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    Public Sub Update(ByVal test as Test)  Implements ITestRepository.Update
             With Test
Update( CInt(.TestTypeId), .ProjectId, .GroupId, .Name, .TestValue,  CBool(.IsActive),  CInt(.Id))
       End With

    End Sub
          Public Sub Delete( ByVal id As Int32)  Implements ITestRepository.Delete
            Dim command As IDbCommand = _dbTestCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    Public Sub Delete(ByVal test as Test)  Implements ITestRepository.Delete
             With Test
Delete( CInt(.Id))
       End With

    End Sub
          Public Function Insert( ByVal testTypeId As Int32,  ByVal projectId As  Nullable(Of Int32) ,  ByVal groupId As  Nullable(Of Int32) ,  ByVal name As String,  ByVal testValue As String,  ByVal isActive As Boolean)  as Int32 Implements ITestRepository.Insert
            Dim command As IDbCommand = _dbTestCommandProvider.GetInsertDbCommand(TestTypeId, ProjectId, GroupId, Name, TestValue, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    Public Function Insert(ByVal test as Test)  as Int32 Implements ITestRepository.Insert
             With Test
 Return Insert( CInt(.TestTypeId), .ProjectId, .GroupId, .Name, .TestValue,  CBool(.IsActive))
       End With

    End Function
          Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetDataPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetRowCount()  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetDataById( ByVal id As Int32)  as ICollection(Of Test) Implements ITestRepository.GetDataById
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveData()  as ICollection(Of Test) Implements ITestRepository.GetActiveData
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetActiveDataRowCount()
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetActiveDataRowCount()  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetDataByProjectId( ByVal projectId As Int32)  as ICollection(Of Test) Implements ITestRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetDataByProjectIdPageable( ByVal projectId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetDataByProjectIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByProjectIdPageableDbCommand(ProjectId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetDataByProjectIdRowCount(projectId)
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetDataByProjectIdRowCount( ByVal projectId As Int32)  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetActiveDataByProjectId( ByVal projectId As Int32)  as ICollection(Of Test) Implements ITestRepository.GetActiveDataByProjectId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveDataByProjectIdPageable( ByVal projectId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetActiveDataByProjectIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByProjectIdPageableDbCommand(ProjectId, sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetActiveDataByProjectIdRowCount(projectId)
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetActiveDataByProjectIdRowCount( ByVal projectId As Int32)  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetDataByGroupId( ByVal groupId As Int32)  as ICollection(Of Test) Implements ITestRepository.GetDataByGroupId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByGroupIdDbCommand(GroupId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetDataByGroupIdPageable( ByVal groupId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetDataByGroupIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByGroupIdPageableDbCommand(GroupId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetDataByGroupIdRowCount(groupId)
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetDataByGroupIdRowCount( ByVal groupId As Int32)  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByGroupIdRowCountDbCommand(GroupId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetActiveDataByGroupId( ByVal groupId As Int32)  as ICollection(Of Test) Implements ITestRepository.GetActiveDataByGroupId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByGroupIdDbCommand(GroupId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveDataByGroupIdPageable( ByVal groupId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetActiveDataByGroupIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByGroupIdPageableDbCommand(GroupId, sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetActiveDataByGroupIdRowCount(groupId)
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetActiveDataByGroupIdRowCount( ByVal groupId As Int32)  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByGroupIdRowCountDbCommand(GroupId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetDataByTestTypeId( ByVal testTypeId As Int32)  as ICollection(Of Test) Implements ITestRepository.GetDataByTestTypeId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByTestTypeIdDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetDataByTestTypeIdPageable( ByVal testTypeId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetDataByTestTypeIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByTestTypeIdPageableDbCommand(TestTypeId, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetDataByTestTypeIdRowCount(testTypeId)
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetDataByTestTypeIdRowCount( ByVal testTypeId As Int32)  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByTestTypeIdRowCountDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
          Public Function GetActiveDataByTestTypeId( ByVal testTypeId As Int32)  as ICollection(Of Test) Implements ITestRepository.GetActiveDataByTestTypeId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByTestTypeIdDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Return entList 

    End Function
          Public Function GetActiveDataByTestTypeIdPageable( ByVal testTypeId As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as PagedResult(Of Test) Implements ITestRepository.GetActiveDataByTestTypeIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByTestTypeIdPageableDbCommand(TestTypeId, sortExpression, page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Test( reader.GetInt32("Id"),  reader.GetInt32("TestTypeId"),  reader.GetNullableInt32("ProjectId"),  reader.GetNullableInt32("GroupId"),  reader.GetString("Name") ,  reader.GetString("TestValue") ,  reader.GetBoolean("IsActive"))
                 entList.Add(tempEntity)
            Loop
            reader.Close 
            Dim totalCount as Int64 = GetActiveDataByTestTypeIdRowCount(testTypeId)
            Dim pagedResults as PagedResult(Of Test) = New PagedResult(Of Test)(page, pageSize, totalCount, entList)
            Return pagedResults

    End Function
          Public Function GetActiveDataByTestTypeIdRowCount( ByVal testTypeId As Int32)  as Int32
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByTestTypeIdRowCountDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
