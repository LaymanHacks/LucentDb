'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(True)>
    Public Class DbTestRepository
        Implements ITestRepository
        Implements IDisposable

        Private ReadOnly _dbTestCommandProvider As IDbTestCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbTestCommandProvider As IDbTestCommandProvider)
            _dbTestCommandProvider = dbTestCommandProvider
            _dbConnHolder = _dbTestCommandProvider.TestDbConnectionHolder
        End Sub


        ''' <summary>
        '''     Selects one or more records from the Test table
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, True)>
        Public Function GetData() As ICollection(Of Test) Implements ITestRepository.GetData
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Updates one or more records from the Test table
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' <param name="TestTypeId"></param>
        ''' <param name="Name"></param>
        ''' <param name="IsActive"></param>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, True)>
        Public Sub Update(projectId As Int32, testTypeId As Int32, name As String, isActive As Boolean, id As Int32) _
            Implements ITestRepository.Update
            Dim command As IDbCommand = _dbTestCommandProvider.GetUpdateDbCommand(ProjectId, TestTypeId, Name, IsActive,
                                                                                  Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Updates one or more records from the Test table
        ''' </summary>
        ''' <param name="Test"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, False)>
        Public Sub Update(test As Test) Implements ITestRepository.Update
            With Test
                Update(CInt(.ProjectId), CInt(.TestTypeId), CStr(.Name), CBool(.IsActive), CInt(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Test table
        ''' </summary>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, True)>
        Public Sub Delete(id As Int32) Implements ITestRepository.Delete
            Dim command As IDbCommand = _dbTestCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery()
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Test table
        ''' </summary>
        ''' <param name="Test"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, False)>
        Public Sub Delete(test As Test) Implements ITestRepository.Delete
            With Test
                Delete(CInt(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Inserts an entity of Test into the database.
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' <param name="TestTypeId"></param>
        ''' <param name="Name"></param>
        ''' <param name="IsActive"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, True)>
        Public Function Insert(projectId As Int32, testTypeId As Int32, name As String, isActive As Boolean) As Int32 _
            Implements ITestRepository.Insert
            Dim command As IDbCommand = _dbTestCommandProvider.GetInsertDbCommand(ProjectId, TestTypeId, Name, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Inserts an entity of Test into the database.
        ''' </summary>
        ''' <param name="Test"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, False)>
        Public Function Insert(test As Test) As Int32 Implements ITestRepository.Insert
            With Test
                Return Insert(CInt(.ProjectId), CInt(.TestTypeId), CStr(.Name), CBool(.IsActive))
            End With
        End Function

        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            As ICollection(Of Test) Implements ITestRepository.GetDataPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                           pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetRowCount() As Int32 Implements ITestRepository.GetRowCount
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function  GetDataById returns a IDataReader for Test
        ''' </summary>
        ''' <param name="Id"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataById(id As Int32) As ICollection(Of Test) Implements ITestRepository.GetDataById
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveData returns a TestList for Test with records that are marked as active
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, True)>
        Public Function GetActiveData() As ICollection(Of Test) Implements ITestRepository.GetActiveData
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataPageable returns a TestList populated with paged active records from Test
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            As ICollection(Of Test) Implements ITestRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression, page,
                                                                                                 PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataRowCount returns the row count for Test
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataRowCount() As Int32 Implements ITestRepository.GetActiveDataRowCount
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetDataByProjectId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataByProjectId(projectId As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetDataByProjectId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByProjectIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataByProjectIdPageable(projectId As Int32, sortExpression As String, page As Int32,
                                                   pageSize As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetDataByProjectIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByProjectIdPageableDbCommand(ProjectId,
                                                                                                      sortExpression,
                                                                                                      page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataByProjectIdRowCount(projectId As Int32) As Int32 _
            Implements ITestRepository.GetDataByProjectIdRowCount
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetActiveDataByProjectId returns a TestList for Test
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataByProjectId(projectId As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetActiveDataByProjectId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByProjectIdDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataByProjectIdPageable returns a TestList populated with a subset of data from Test
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataByProjectIdPageable(projectId As Int32, sortExpression As String, page As Int32,
                                                         pageSize As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetActiveDataByProjectIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByProjectIdPageableDbCommand(ProjectId,
                                                                                                            sortExpression,
                                                                                                            page,
                                                                                                            PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="ProjectId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataByProjectIdRowCount(projectId As Int32) As Int32 _
            Implements ITestRepository.GetActiveDataByProjectIdRowCount
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByProjectIdRowCountDbCommand(ProjectId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetDataByTestTypeId returns a IDataReader for Test
        ''' </summary>
        ''' <param name="TestTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataByTestTypeId(testTypeId As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetDataByTestTypeId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByTestTypeIdDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByTestTypeIdPageable returns a IDataReader populated with a subset of data from Test
        ''' </summary>
        ''' <param name="TestTypeId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataByTestTypeIdPageable(testTypeId As Int32, sortExpression As String, page As Int32,
                                                    pageSize As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetDataByTestTypeIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByTestTypeIdPageableDbCommand(TestTypeId,
                                                                                                       sortExpression,
                                                                                                       page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="TestTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetDataByTestTypeIdRowCount(testTypeId As Int32) As Int32 _
            Implements ITestRepository.GetDataByTestTypeIdRowCount
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetDataByTestTypeIdRowCountDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetActiveDataByTestTypeId returns a TestList for Test
        ''' </summary>
        ''' <param name="TestTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataByTestTypeId(testTypeId As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetActiveDataByTestTypeId
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByTestTypeIdDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataByTestTypeIdPageable returns a TestList populated with a subset of data from Test
        ''' </summary>
        ''' <param name="TestTypeId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataByTestTypeIdPageable(testTypeId As Int32, sortExpression As String, page As Int32,
                                                          pageSize As Int32) As ICollection(Of Test) _
            Implements ITestRepository.GetActiveDataByTestTypeIdPageable
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByTestTypeIdPageableDbCommand(TestTypeId,
                                                                                                             sortExpression,
                                                                                                             page,
                                                                                                             PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Test)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Test(reader.GetInt32("Id"), reader.GetInt32("ProjectId"), reader.GetInt32("TestTypeId"),
                                 reader.GetString("Name"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test
        ''' </summary>
        ''' <param name="TestTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, False)>
        Public Function GetActiveDataByTestTypeIdRowCount(testTypeId As Int32) As Int32 _
            Implements ITestRepository.GetActiveDataByTestTypeIdRowCount
            Dim command As IDbCommand = _dbTestCommandProvider.GetGetActiveDataByTestTypeIdRowCountDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End Namespace
