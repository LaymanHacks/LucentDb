'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbTestValueTypeRepository
        Implements ITestValueTypeRepository
        Implements IDisposable

        Private ReadOnly _dbTestValueTypeCommandProvider As IDbTestValueTypeCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbTestValueTypeCommandProvider As IDbTestValueTypeCommandProvider)
            _dbTestValueTypeCommandProvider = dbTestValueTypeCommandProvider
            _dbConnHolder = _dbTestValueTypeCommandProvider.TestValueTypeDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of TestValueType) Implements ITestValueTypeRepository.GetData
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(testTypeId As Int32, name As String, isActive As Boolean, id As Int32) _
            Implements ITestValueTypeRepository.Update
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetUpdateDbCommand(TestTypeId, Name, IsActive,
                                                                                           Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(testValueType as TestValueType) Implements ITestValueTypeRepository.Update
            With TestValueType
                Update(CInt(.TestTypeId), .Name, CBool(.IsActive), CInt(.Id))
            End With
        End Sub

        Public Sub Delete(id As Int32) Implements ITestValueTypeRepository.Delete
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(testValueType as TestValueType) Implements ITestValueTypeRepository.Delete
            With TestValueType
                Delete(CInt(.Id))
            End With
        End Sub

        Public Function Insert(testTypeId As Int32, name As String, isActive As Boolean) as Int32 _
            Implements ITestValueTypeRepository.Insert
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetInsertDbCommand(TestTypeId, Name, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function Insert(testValueType as TestValueType) as Int32 Implements ITestValueTypeRepository.Insert
            With TestValueType
                Return Insert(CInt(.TestTypeId), .Name, CBool(.IsActive))
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of TestValueType) Implements ITestValueTypeRepository.GetDataPageable
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                                    pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of TestValueType) = New PagedResult(Of TestValueType)(page, pageSize,
                                                                                                  totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataById(id As Int32) as ICollection(Of TestValueType) _
            Implements ITestValueTypeRepository.GetDataById
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveData() as ICollection(Of TestValueType) _
            Implements ITestValueTypeRepository.GetActiveData
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of TestValueType) Implements ITestValueTypeRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression,
                                                                                                          page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetActiveDataRowCount()
            Dim pagedResults as PagedResult(Of TestValueType) = New PagedResult(Of TestValueType)(page, pageSize,
                                                                                                  totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetActiveDataRowCount() as Int32
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataByTestTypeId(testTypeId As Int32) as ICollection(Of TestValueType) _
            Implements ITestValueTypeRepository.GetDataByTestTypeId
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetDataByTestTypeIdDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByTestTypeIdPageable(testTypeId As Int32, sortExpression As String, page As Int32,
                                                    pageSize As Int32) as PagedResult(Of TestValueType) _
            Implements ITestValueTypeRepository.GetDataByTestTypeIdPageable
            Dim command As IDbCommand =
                    _dbTestValueTypeCommandProvider.GetGetDataByTestTypeIdPageableDbCommand(TestTypeId, sortExpression,
                                                                                            page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByTestTypeIdRowCount(testTypeId)
            Dim pagedResults as PagedResult(Of TestValueType) = New PagedResult(Of TestValueType)(page, pageSize,
                                                                                                  totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetDataByTestTypeIdRowCount(testTypeId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbTestValueTypeCommandProvider.GetGetDataByTestTypeIdRowCountDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetActiveDataByTestTypeId(testTypeId As Int32) as ICollection(Of TestValueType) _
            Implements ITestValueTypeRepository.GetActiveDataByTestTypeId
            Dim command As IDbCommand = _dbTestValueTypeCommandProvider.GetGetActiveDataByTestTypeIdDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveDataByTestTypeIdPageable(testTypeId As Int32, sortExpression As String, page As Int32,
                                                          pageSize As Int32) as PagedResult(Of TestValueType) _
            Implements ITestValueTypeRepository.GetActiveDataByTestTypeIdPageable
            Dim command As IDbCommand =
                    _dbTestValueTypeCommandProvider.GetGetActiveDataByTestTypeIdPageableDbCommand(TestTypeId,
                                                                                                  sortExpression, page,
                                                                                                  PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestValueType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestValueType(reader.GetInt32("Id"), reader.GetInt32("TestTypeId"), reader.GetString("Name"),
                                          reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetActiveDataByTestTypeIdRowCount(testTypeId)
            Dim pagedResults as PagedResult(Of TestValueType) = New PagedResult(Of TestValueType)(page, pageSize,
                                                                                                  totalCount, entList)
            Return pagedResults
        End Function

        Public Function GetActiveDataByTestTypeIdRowCount(testTypeId As Int32) as Int32
            Dim command As IDbCommand =
                    _dbTestValueTypeCommandProvider.GetGetActiveDataByTestTypeIdRowCountDbCommand(TestTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
