'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbScriptRepository
        Implements IScriptRepository
        Implements IDisposable

        Private ReadOnly _dbScriptCommandProvider As IDbScriptCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbScriptCommandProvider As IDbScriptCommandProvider)
            _dbScriptCommandProvider = dbScriptCommandProvider
            _dbConnHolder = _dbScriptCommandProvider.ScriptDbConnectionHolder
        End Sub


        ''' <summary>
        '''     Selects one or more records from the Script table
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetData() as ICollection(Of Script) Implements IScriptRepository.GetData
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Updates one or more records from the Script table
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' <param name="Name"></param>
        ''' <param name="ScriptValue"></param>
        ''' <param name="IsActive"></param>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, true)>
        Public Sub Update(scriptTypeId As Int32, name As String, scriptValue As String, isActive As Boolean, id As Int32) _
            Implements IScriptRepository.Update
            Dim command As IDbCommand = _dbScriptCommandProvider.GetUpdateDbCommand(ScriptTypeId, Name, ScriptValue,
                                                                                    IsActive, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Updates one or more records from the Script table
        ''' </summary>
        ''' <param name="Script"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, False)>
        Public Sub Update(script as Script) Implements IScriptRepository.Update
            With Script
                Update(CInt(.ScriptTypeId), .Name, .ScriptValue, CBool(.IsActive), CInt(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Script table
        ''' </summary>
        ''' <param name="Id"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, true)>
        Public Sub Delete(id As Int32) Implements IScriptRepository.Delete
            Dim command As IDbCommand = _dbScriptCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Script table
        ''' </summary>
        ''' <param name="Script"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, False)>
        Public Sub Delete(script as Script) Implements IScriptRepository.Delete
            With Script
                Delete(CInt(.Id))
            End With
        End Sub

        ''' <summary>
        '''     Inserts an entity of Script into the database.
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' <param name="Name"></param>
        ''' <param name="ScriptValue"></param>
        ''' <param name="IsActive"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, true)>
        Public Function Insert(scriptTypeId As Int32, name As String, scriptValue As String, isActive As Boolean) _
            as Int32 Implements IScriptRepository.Insert
            Dim command As IDbCommand = _dbScriptCommandProvider.GetInsertDbCommand(ScriptTypeId, Name, ScriptValue,
                                                                                    IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Inserts an entity of Script into the database.
        ''' </summary>
        ''' <param name="Script"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, False)>
        Public Function Insert(script as Script) as Int32 Implements IScriptRepository.Insert
            With Script
                Return Insert(CInt(.ScriptTypeId), .Name, .ScriptValue, CBool(.IsActive))
            End With
        End Function

        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from Script
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of Script) Implements IScriptRepository.GetDataPageable
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                             pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Script
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetRowCount() as Int32 Implements IScriptRepository.GetRowCount
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function  GetDataById returns a IDataReader for Script
        ''' </summary>
        ''' <param name="Id"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataById(id As Int32) as ICollection(Of Script) Implements IScriptRepository.GetDataById
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveData returns a ScriptList for Script with records that are marked as active
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetActiveData() as ICollection(Of Script) Implements IScriptRepository.GetActiveData
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataPageable returns a ScriptList populated with paged active records from Script
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of Script) Implements IScriptRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression, page,
                                                                                                   PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataRowCount returns the row count for Script
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataRowCount() as Int32 Implements IScriptRepository.GetActiveDataRowCount
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetScriptsForTestByTestId returns a Test
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetScriptsForTestByTestId(testId As Int32) as ICollection(Of Script) _
            Implements IScriptRepository.GetScriptsForTestByTestId
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetScriptsForTestByTestIdDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByScriptTypeId returns a IDataReader for Script
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByScriptTypeId(scriptTypeId As Int32) as ICollection(Of Script) _
            Implements IScriptRepository.GetDataByScriptTypeId
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetDataByScriptTypeIdDbCommand(ScriptTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByScriptTypeIdPageable returns a IDataReader populated with a subset of data from Script
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByScriptTypeIdPageable(scriptTypeId As Int32, sortExpression As String, page As Int32,
                                                      pageSize As Int32) as ICollection(Of Script) _
            Implements IScriptRepository.GetDataByScriptTypeIdPageable
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetDataByScriptTypeIdPageableDbCommand(ScriptTypeId,
                                                                                                           sortExpression,
                                                                                                           page,
                                                                                                           pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Script
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByScriptTypeIdRowCount(scriptTypeId As Int32) as Int32 _
            Implements IScriptRepository.GetDataByScriptTypeIdRowCount
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetDataByScriptTypeIdRowCountDbCommand(ScriptTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetActiveDataByScriptTypeId returns a ScriptList for Script
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataByScriptTypeId(scriptTypeId As Int32) as ICollection(Of Script) _
            Implements IScriptRepository.GetActiveDataByScriptTypeId
            Dim command As IDbCommand = _dbScriptCommandProvider.GetGetActiveDataByScriptTypeIdDbCommand(ScriptTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetActiveDataByScriptTypeIdPageable returns a ScriptList populated with a subset of data from Script
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="PageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataByScriptTypeIdPageable(scriptTypeId As Int32, sortExpression As String,
                                                            page As Int32, pageSize As Int32) as ICollection(Of Script) _
            Implements IScriptRepository.GetActiveDataByScriptTypeIdPageable
            Dim command As IDbCommand =
                    _dbScriptCommandProvider.GetGetActiveDataByScriptTypeIdPageableDbCommand(ScriptTypeId,
                                                                                             sortExpression, page,
                                                                                             PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New Script(reader.GetInt32("Id"), reader.GetInt32("ScriptTypeId"), reader.GetString("Name"),
                                   reader.GetString("ScriptValue"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Script
        ''' </summary>
        ''' <param name="ScriptTypeId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetActiveDataByScriptTypeIdRowCount(scriptTypeId As Int32) as Int32 _
            Implements IScriptRepository.GetActiveDataByScriptTypeIdRowCount
            Dim command As IDbCommand =
                    _dbScriptCommandProvider.GetGetActiveDataByScriptTypeIdRowCountDbCommand(ScriptTypeId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
