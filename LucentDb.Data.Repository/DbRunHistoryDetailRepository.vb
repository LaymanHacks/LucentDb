'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbRunHistoryDetailRepository
        Implements IRunHistoryDetailRepository
        Implements IDisposable

        Private ReadOnly _dbRunHistoryDetailCommandProvider As IDbRunHistoryDetailCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbRunHistoryDetailCommandProvider As IDbRunHistoryDetailCommandProvider)
            _dbRunHistoryDetailCommandProvider = dbRunHistoryDetailCommandProvider
            _dbConnHolder = _dbRunHistoryDetailCommandProvider.RunHistoryDetailDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of RunHistoryDetail) Implements IRunHistoryDetailRepository.GetData
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistoryDetail)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistoryDetail(reader.GetInt64("Id"), reader.GetInt64("RunHistoryId"),
                                             reader.GetInt32("TestId"), reader.GetDateTime("RunDateTime"),
                                             reader.GetNullableDecimal("Duration"), reader.GetBoolean("IsValid"),
                                             reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(runHistoryId As Int64, testId As Int32, runDateTime As DateTime,
                          duration As Nullable(Of Decimal), isValid As Boolean, resultString As String, id As Int64) _
            Implements IRunHistoryDetailRepository.Update
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetUpdateDbCommand(RunHistoryId, TestId,
                                                                                              RunDateTime, Duration,
                                                                                              IsValid, ResultString, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(runHistoryDetail as RunHistoryDetail) Implements IRunHistoryDetailRepository.Update
            With RunHistoryDetail
                Update(CLng(.RunHistoryId), CInt(.TestId), CDate(.RunDateTime), .Duration, CBool(.IsValid),
                       .ResultString, CLng(.Id))
            End With
        End Sub

        Public Sub Delete(id As Int64) Implements IRunHistoryDetailRepository.Delete
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(runHistoryDetail as RunHistoryDetail) Implements IRunHistoryDetailRepository.Delete
            With RunHistoryDetail
                Delete(CLng(.Id))
            End With
        End Sub

        Public Function Insert(runHistoryId As Int64, testId As Int32, runDateTime As DateTime,
                               duration As Nullable(Of Decimal), isValid As Boolean, resultString As String) as Int64 _
            Implements IRunHistoryDetailRepository.Insert
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetInsertDbCommand(RunHistoryId, TestId,
                                                                                              RunDateTime, Duration,
                                                                                              IsValid, ResultString)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int64 = Convert.ToInt64(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function Insert(runHistoryDetail as RunHistoryDetail) as Int64 _
            Implements IRunHistoryDetailRepository.Insert
            With RunHistoryDetail
                Return _
                    Insert(CLng(.RunHistoryId), CInt(.TestId), CDate(.RunDateTime), .Duration, CBool(.IsValid),
                           .ResultString)
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of RunHistoryDetail) Implements IRunHistoryDetailRepository.GetDataPageable
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetGetDataPageableDbCommand(sortExpression,
                                                                                                       page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistoryDetail)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistoryDetail(reader.GetInt64("Id"), reader.GetInt64("RunHistoryId"),
                                             reader.GetInt32("TestId"), reader.GetDateTime("RunDateTime"),
                                             reader.GetNullableDecimal("Duration"), reader.GetBoolean("IsValid"),
                                             reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of RunHistoryDetail) = New PagedResult(Of RunHistoryDetail)(page, pageSize,
                                                                                                        totalCount,
                                                                                                        entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataById(id As Int64) as ICollection(Of RunHistoryDetail) _
            Implements IRunHistoryDetailRepository.GetDataById
            Dim command As IDbCommand = _dbRunHistoryDetailCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistoryDetail)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistoryDetail(reader.GetInt64("Id"), reader.GetInt64("RunHistoryId"),
                                             reader.GetInt32("TestId"), reader.GetDateTime("RunDateTime"),
                                             reader.GetNullableDecimal("Duration"), reader.GetBoolean("IsValid"),
                                             reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByRunHistoryId(runHistoryId As Int64) as ICollection(Of RunHistoryDetail) _
            Implements IRunHistoryDetailRepository.GetDataByRunHistoryId
            Dim command As IDbCommand =
                    _dbRunHistoryDetailCommandProvider.GetGetDataByRunHistoryIdDbCommand(RunHistoryId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistoryDetail)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistoryDetail(reader.GetInt64("Id"), reader.GetInt64("RunHistoryId"),
                                             reader.GetInt32("TestId"), reader.GetDateTime("RunDateTime"),
                                             reader.GetNullableDecimal("Duration"), reader.GetBoolean("IsValid"),
                                             reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetDataByRunHistoryIdPageable(runHistoryId As Int64, sortExpression As String, page As Int32,
                                                      pageSize As Int32) as PagedResult(Of RunHistoryDetail) _
            Implements IRunHistoryDetailRepository.GetDataByRunHistoryIdPageable
            Dim command As IDbCommand =
                    _dbRunHistoryDetailCommandProvider.GetGetDataByRunHistoryIdPageableDbCommand(RunHistoryId,
                                                                                                 sortExpression, page,
                                                                                                 pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of RunHistoryDetail)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New RunHistoryDetail(reader.GetInt64("Id"), reader.GetInt64("RunHistoryId"),
                                             reader.GetInt32("TestId"), reader.GetDateTime("RunDateTime"),
                                             reader.GetNullableDecimal("Duration"), reader.GetBoolean("IsValid"),
                                             reader.GetString("ResultString"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetDataByRunHistoryIdRowCount(runHistoryId)
            Dim pagedResults as PagedResult(Of RunHistoryDetail) = New PagedResult(Of RunHistoryDetail)(page, pageSize,
                                                                                                        totalCount,
                                                                                                        entList)
            Return pagedResults
        End Function

        Public Function GetDataByRunHistoryIdRowCount(runHistoryId As Int64) as Int32
            Dim command As IDbCommand =
                    _dbRunHistoryDetailCommandProvider.GetGetDataByRunHistoryIdRowCountDbCommand(RunHistoryId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
