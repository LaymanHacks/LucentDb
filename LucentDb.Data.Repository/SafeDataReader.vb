'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data

Namespace LucentDb.Data
    Public Class SafeDataReader
        Implements IDataReader

        Private ReadOnly _dr As IDataReader

        Public Sub New(dr As IDataReader)
            _dr = dr
        End Sub

        Public Sub Close() Implements IDataReader.Close
            _dr.Close()
        End Sub

        Public ReadOnly Property Depth As Integer Implements IDataReader.Depth
            Get
                Return _dr.Depth
            End Get
        End Property

        Public Function GetSchemaTable() As DataTable Implements IDataReader.GetSchemaTable
            Return _dr.GetSchemaTable
        End Function

        Public ReadOnly Property IsClosed As Boolean Implements IDataReader.IsClosed
            Get
                Return _dr.IsClosed
            End Get
        End Property

        Public Function NextResult() As Boolean Implements IDataReader.NextResult
            Return _dr.NextResult
        End Function

        Public Function Read() As Boolean Implements IDataReader.Read
            Return _dr.Read
        End Function

        Public ReadOnly Property RecordsAffected As Integer Implements IDataReader.RecordsAffected
            Get
                Return _dr.RecordsAffected
            End Get
        End Property

        Public ReadOnly Property FieldCount As Integer Implements IDataRecord.FieldCount
            Get
                Return _dr.FieldCount
            End Get
        End Property

        Public Function GetBoolean(i As Integer) As Boolean Implements IDataRecord.GetBoolean
            If _dr.IsDBNull(i) Then
                Return False
            End If
            Return _dr.GetBoolean(i)
        End Function

        Public Function GetByte(i As Integer) As Byte Implements IDataRecord.GetByte
            If _dr.IsDBNull(i) Then
                Return 0 'Could be Byte.MinValue
            End If
            Return _dr.GetByte(i)
        End Function

        Public Function GetBytes(i As Integer, fieldOffset As Long, buffer() As Byte, bufferoffset As Integer,
                                 length As Integer) As Long Implements IDataRecord.GetBytes
            If _dr.IsDBNull(i) Then
                Return 0 'Could be Long.MinValue
            End If
            Return _dr.GetBytes(i, fieldOffset, buffer, bufferoffset, length)
        End Function

        Public Function GetChar(i As Integer) As Char Implements IDataRecord.GetChar
            If _dr.IsDBNull(i) Then
                Return Char.MinValue
            End If
            Return _dr.GetChar(i)
        End Function

        Public Function GetChars(i As Integer, fieldoffset As Long, buffer() As Char, bufferoffset As Integer,
                                 length As Integer) As Long Implements IDataRecord.GetChars
            If _dr.IsDBNull(i) Then
                Return 0
            End If
            Return _dr.GetChars(i, fieldoffset, buffer, bufferoffset, length)
        End Function

        Public Function GetData(i As Integer) As IDataReader Implements IDataRecord.GetData
            Return _dr.GetData(i)
        End Function

        Public Function GetDataTypeName(i As Integer) As String Implements IDataRecord.GetDataTypeName
            Return _dr.GetDataTypeName(i)
        End Function

        Public Function GetDateTime(i As Integer) As Date Implements IDataRecord.GetDateTime
            If _dr.IsDBNull(i) Then
                Return DateTime.MinValue
            End If
            Return _dr.GetDateTime(i)
        End Function

        Public Function GetDecimal(i As Integer) As Decimal Implements IDataRecord.GetDecimal
            If _dr.IsDBNull(i) Then
                Return 0 'Could use Decimal.MinValue
            End If
            Return _dr.GetDecimal(i)
        End Function

        Public Function GetDouble(i As Integer) As Double Implements IDataRecord.GetDouble
            If _dr.IsDBNull(i) Then
                Return 0 'Could use Double.MinValue
            End If
            Return _dr.GetDouble(i)
        End Function

        Public Function GetFieldType(i As Integer) As Type Implements IDataRecord.GetFieldType
            Return _dr.GetFieldType(i)
        End Function

        Public Function GetFloat(i As Integer) As Single Implements IDataRecord.GetFloat
            If _dr.IsDBNull(i) Then
                Return 0 'Could use Single.MinValue
            End If
            Return _dr.GetFloat(i)
        End Function

        Public Function GetGuid(i As Integer) As Guid Implements IDataRecord.GetGuid
            If _dr.IsDBNull(i) Then
                Return Guid.Empty
            End If
            Return _dr.GetGuid(i)
        End Function

        Public Function GetInt16(i As Integer) As Short Implements IDataRecord.GetInt16
            If _dr.IsDBNull(i) Then
                Return 0 'Could use Short.MinValue
            End If
            Return _dr.GetInt16(i)
        End Function

        Public Function GetInt32(i As Integer) As Integer Implements IDataRecord.GetInt32
            If _dr.IsDBNull(i) Then
                Return 0 'Could use Int32.MinValue
            End If
            Return _dr.GetInt32(i)
        End Function

        Public Function GetInt64(i As Integer) As Long Implements IDataRecord.GetInt64
            If _dr.IsDBNull(i) Then
                Return 0 'Could use Long.MinValue
            End If
            Return _dr.GetInt64(i)
        End Function

        Public Function GetName(i As Integer) As String Implements IDataRecord.GetName
            Return _dr.GetName(i)
        End Function

        Public Function GetOrdinal(name As String) As Integer Implements IDataRecord.GetOrdinal
            Return _dr.GetOrdinal(name)
        End Function

        Public Function GetString(i As Integer) As String Implements IDataRecord.GetString
            If _dr.IsDBNull(i) Then
                Return String.Empty
            End If
            Return _dr.GetString(i)
        End Function

        Public Function GetValue(i As Integer) As Object Implements IDataRecord.GetValue
            Return _dr.GetValue(i)
        End Function

        Public Function GetValues(values() As Object) As Integer Implements IDataRecord.GetValues
            Return _dr.GetValues(values)
        End Function

        Public Function IsDBNull(i As Integer) As Boolean Implements IDataRecord.IsDBNull
            Return _dr.IsDBNull(i)
        End Function

        Default Public Overloads ReadOnly Property Item(i As Integer) As Object Implements IDataRecord.Item
            Get
                If _dr.IsDBNull(i) Then
                    Return Nothing
                End If
                Return _dr.Item(i)
            End Get
        End Property

        Default Public Overloads ReadOnly Property Item(name As String) As Object Implements IDataRecord.Item
            Get
                If _dr.IsDBNull(_dr.GetOrdinal(name)) Then
                    Return Nothing
                End If
                Return _dr.Item(name)
            End Get
        End Property

#Region " Custom methods"

        Public Function GetNullableDateTime(name As String) As Nullable(Of DateTime)
            Return CType(_dr(name), Nullable(Of DateTime))
        End Function

        Public Function GetNullableDecimal(name As String) As Nullable(Of Decimal)
            Return CType(_dr(name), Nullable(Of Decimal))
        End Function

        Public Function GetNullableInteger(name As String) As Nullable(Of Integer)
            Return CType(_dr(name), Nullable(Of Integer))
        End Function

        Public Function GetNullableInt32(name As String) As Nullable(Of Int32)
            If (Item(name) Is Nothing) Then
                Return CType(Nothing, Nullable(Of Int32))
            Else
                Return CType(_dr(name), Nullable(Of Int32))
            End If
        End Function

        Public Function GetNullableBoolean(name As String) As Nullable(Of Boolean)
            Return CType(_dr(name), Nullable(Of Boolean))
        End Function

        Public Function GetGuid(name As String) As Guid
            Return GetGuid(_dr.GetOrdinal(name))
        End Function

        Public Function GetDateTime(name As String) As DateTime
            Return GetDateTime(_dr.GetOrdinal(name))
        End Function

        Public Function GetDecimal(name As String) As Decimal
            Return GetDecimal(_dr.GetOrdinal(name))
        End Function

        Public Function GetInt16(name As String) As Int16
            Return GetInt16(_dr.GetOrdinal(name))
        End Function

        Public Function GetInt32(name As String) As Int32
            Return GetInt32(_dr.GetOrdinal(name))
        End Function

        Public Function GetInt64(name As String) As Int64
            Return GetInt64(_dr.GetOrdinal(name))
        End Function

        Public Function GetBoolean(name As String) As Boolean
            Return GetBoolean(_dr.GetOrdinal(name))
        End Function

        Public Function GetString(name As String) As String
            Return GetString(_dr.GetOrdinal(name))
        End Function

#End Region

        Private disposedValue As Boolean = False        ' To detect redundant calls

        ' IDisposable
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    ' TODO: free other state (managed objects).
                End If
                ' TODO: free your own state (unmanaged objects).
                ' TODO: set large fields to null.
            End If
            Me.disposedValue = True
        End Sub

#Region " IDisposable Support "
        ' This code added by Visual Basic to correctly implement the disposable pattern.
        Public Sub Dispose() Implements IDisposable.Dispose
            ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End Namespace


