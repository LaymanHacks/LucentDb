'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbTest_ScriptRepository
        Implements ITest_ScriptRepository
        Implements IDisposable

        Private ReadOnly _dbTest_ScriptCommandProvider As IDbTest_ScriptCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbTest_ScriptCommandProvider As IDbTest_ScriptCommandProvider)
            _dbTest_ScriptCommandProvider = dbTest_ScriptCommandProvider
            _dbConnHolder = _dbTest_ScriptCommandProvider.Test_ScriptDbConnectionHolder
        End Sub


        ''' <summary>
        '''     Selects one or more records from the Test_Script table
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, true)>
        Public Function GetData() as ICollection(Of Test_Script) Implements ITest_ScriptRepository.GetData
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Updates one or more records from the Test_Script table
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="ScriptId"></param>
        ''' <param name="Original_TestId"></param>
        ''' <param name="Original_ScriptId"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, true)>
        Public Sub Update(testId As Int32, scriptId As Int32, original_TestId As Int32, original_ScriptId As Int32) _
            Implements ITest_ScriptRepository.Update
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetUpdateDbCommand(TestId, ScriptId,
                                                                                         Original_TestId,
                                                                                         Original_ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Updates one or more records from the Test_Script table
        ''' </summary>
        ''' <param name="Test_Script"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Update, False)>
        Public Sub Update(test_Script as Test_Script, original_TestId As Int32, original_ScriptId As Int32) _
            Implements ITest_ScriptRepository.Update
            With Test_Script
                Update(CInt(.TestId), CInt(.ScriptId), CInt(Original_TestId), CInt(Original_ScriptId))
            End With
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Test_Script table
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="ScriptId"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, true)>
        Public Sub Delete(testId As Int32, scriptId As Int32) Implements ITest_ScriptRepository.Delete
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetDeleteDbCommand(TestId, ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        ''' <summary>
        '''     Deletes one or more records from the Test_Script table
        ''' </summary>
        ''' <param name="Test_Script"></param>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Delete, False)>
        Public Sub Delete(test_Script as Test_Script) Implements ITest_ScriptRepository.Delete
            With Test_Script
                Delete(CInt(.TestId), CInt(.ScriptId))
            End With
        End Sub

        ''' <summary>
        '''     Inserts an entity of Test_Script into the database.
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="ScriptId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, true)>
        Public Function Insert(testId As Int32, scriptId As Int32) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.Insert
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetInsertDbCommand(TestId, ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Inserts an entity of Test_Script into the database.
        ''' </summary>
        ''' <param name="Test_Script"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Insert, False)>
        Public Function Insert(test_Script as Test_Script) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.Insert
            With Test_Script
                Return Insert(CInt(.TestId), CInt(.ScriptId))
            End With
        End Function

        ''' <summary>
        '''     Function GetDataPageable returns a IDataReader populated with a subset of data from Test_Script
        ''' </summary>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as ICollection(Of Test_Script) Implements ITest_ScriptRepository.GetDataPageable
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                                  pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test_Script
        ''' </summary>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetRowCount() as Int32 Implements ITest_ScriptRepository.GetRowCount
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function  GetDataByTestIdScriptId returns a IDataReader for Test_Script
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="ScriptId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdScriptId(testId As Int32, scriptId As Int32) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.GetDataByTestIdScriptId
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByTestIdScriptIdDbCommand(TestId,
                                                                                                          ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByScriptId returns a IDataReader for Test_Script
        ''' </summary>
        ''' <param name="ScriptId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByScriptId(scriptId As Int32) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.GetDataByScriptId
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByScriptIdDbCommand(ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByScriptIdPageable returns a IDataReader populated with a subset of data from Test_Script
        ''' </summary>
        ''' <param name="ScriptId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByScriptIdPageable(scriptId As Int32, sortExpression As String, page As Int32,
                                                  pageSize As Int32) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.GetDataByScriptIdPageable
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByScriptIdPageableDbCommand(ScriptId,
                                                                                                            sortExpression,
                                                                                                            page,
                                                                                                            pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test_Script
        ''' </summary>
        ''' <param name="ScriptId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByScriptIdRowCount(scriptId As Int32) as Int32 _
            Implements ITest_ScriptRepository.GetDataByScriptIdRowCount
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByScriptIdRowCountDbCommand(ScriptId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        ''' <summary>
        '''     Function GetDataByTestId returns a IDataReader for Test_Script
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestId(testId As Int32) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.GetDataByTestId
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByTestIdDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetDataByTestIdPageable returns a IDataReader populated with a subset of data from Test_Script
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdPageable(testId As Int32, sortExpression As String, page As Int32,
                                                pageSize As Int32) as ICollection(Of Test_Script) _
            Implements ITest_ScriptRepository.GetDataByTestIdPageable
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByTestIdPageableDbCommand(TestId,
                                                                                                          sortExpression,
                                                                                                          page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of Test_Script)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Test_Script(reader.GetInt32("TestId"), reader.GetInt32("ScriptId"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        ''' <summary>
        '''     Function GetRowCount returns the row count for Test_Script
        ''' </summary>
        ''' <param name="TestId"></param>
        ''' '''
        ''' <returns></returns>
        ''' <remarks></remarks>
        <DataObjectMethod(DataObjectMethodType.Select, false)>
        Public Function GetDataByTestIdRowCount(testId As Int32) as Int32 _
            Implements ITest_ScriptRepository.GetDataByTestIdRowCount
            Dim command As IDbCommand = _dbTest_ScriptCommandProvider.GetGetDataByTestIdRowCountDbCommand(TestId)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
