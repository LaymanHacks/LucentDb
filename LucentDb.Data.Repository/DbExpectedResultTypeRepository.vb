'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbExpectedResultTypeRepository
        Implements IExpectedResultTypeRepository
        Implements IDisposable

        Private ReadOnly _dbExpectedResultTypeCommandProvider As IDbExpectedResultTypeCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbExpectedResultTypeCommandProvider As IDbExpectedResultTypeCommandProvider)
            _dbExpectedResultTypeCommandProvider = dbExpectedResultTypeCommandProvider
            _dbConnHolder = _dbExpectedResultTypeCommandProvider.ExpectedResultTypeDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of ExpectedResultType) Implements IExpectedResultTypeRepository.GetData
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResultType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New ExpectedResultType(reader.GetInt32("Id"), reader.GetString("Name"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(name As String, id As Int32) Implements IExpectedResultTypeRepository.Update
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetUpdateDbCommand(Name, Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(expectedResultType as ExpectedResultType) Implements IExpectedResultTypeRepository.Update
            With ExpectedResultType
                Update(CStr(.Name), CInt(.Id))
            End With
        End Sub

        Public Sub Delete(id As Int32) Implements IExpectedResultTypeRepository.Delete
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(expectedResultType as ExpectedResultType) Implements IExpectedResultTypeRepository.Delete
            With ExpectedResultType
                Delete(CInt(.Id))
            End With
        End Sub

        Public Function Insert(name As String) as Int32 Implements IExpectedResultTypeRepository.Insert
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetInsertDbCommand(Name)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function Insert(expectedResultType as ExpectedResultType) as Int32 _
            Implements IExpectedResultTypeRepository.Insert
            With ExpectedResultType
                Return Insert(CStr(.Name))
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of ExpectedResultType) Implements IExpectedResultTypeRepository.GetDataPageable
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetGetDataPageableDbCommand(sortExpression,
                                                                                                         page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResultType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New ExpectedResultType(reader.GetInt32("Id"), reader.GetString("Name"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of ExpectedResultType) = New PagedResult(Of ExpectedResultType)(page,
                                                                                                            pageSize,
                                                                                                            totalCount,
                                                                                                            entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataById(id As Int32) as ICollection(Of ExpectedResultType) _
            Implements IExpectedResultTypeRepository.GetDataById
            Dim command As IDbCommand = _dbExpectedResultTypeCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of ExpectedResultType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New ExpectedResultType(reader.GetInt32("Id"), reader.GetString("Name"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
