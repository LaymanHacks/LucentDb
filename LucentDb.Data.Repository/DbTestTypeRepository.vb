'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Data
Imports LucentDb.Data.DbCommandProvider
Imports LucentDb.Domain.Entities


Namespace LucentDb.Data.Repository
    <DataObject(true)>
    Public Class DbTestTypeRepository
        Implements ITestTypeRepository
        Implements IDisposable

        Private ReadOnly _dbTestTypeCommandProvider As IDbTestTypeCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(dbTestTypeCommandProvider As IDbTestTypeCommandProvider)
            _dbTestTypeCommandProvider = dbTestTypeCommandProvider
            _dbConnHolder = _dbTestTypeCommandProvider.TestTypeDbConnectionHolder
        End Sub

        Public Function GetData() as ICollection(Of TestType) Implements ITestTypeRepository.GetData
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestType(reader.GetInt32("Id"), reader.GetString("Name"),
                                     reader.GetString("TestValidatorType"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Sub Update(name As String, testValidatorType As String, isActive As Boolean, id As Int32) _
            Implements ITestTypeRepository.Update
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetUpdateDbCommand(Name, TestValidatorType, IsActive,
                                                                                      Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Update(testType as TestType) Implements ITestTypeRepository.Update
            With TestType
                Update(.Name, .TestValidatorType, CBool(.IsActive), CInt(.Id))
            End With
        End Sub

        Public Sub Delete(id As Int32) Implements ITestTypeRepository.Delete
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetDeleteDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Command.ExecuteNonQuery
            _dbConnHolder.Close()
        End Sub

        Public Sub Delete(testType as TestType) Implements ITestTypeRepository.Delete
            With TestType
                Delete(CInt(.Id))
            End With
        End Sub

        Public Function Insert(name As String, testValidatorType As String, isActive As Boolean) as Int32 _
            Implements ITestTypeRepository.Insert
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetInsertDbCommand(Name, TestValidatorType, IsActive)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function Insert(testType as TestType) as Int32 Implements ITestTypeRepository.Insert
            With TestType
                Return Insert(.Name, .TestValidatorType, CBool(.IsActive))
            End With
        End Function

        Public Function GetDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of TestType) Implements ITestTypeRepository.GetDataPageable
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetDataPageableDbCommand(sortExpression, page,
                                                                                               pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestType(reader.GetInt32("Id"), reader.GetString("Name"),
                                     reader.GetString("TestValidatorType"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetRowCount()
            Dim pagedResults as PagedResult(Of TestType) = New PagedResult(Of TestType)(page, pageSize, totalCount,
                                                                                        entList)
            Return pagedResults
        End Function

        Public Function GetRowCount() as Int32
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function

        Public Function GetDataById(id As Int32) as ICollection(Of TestType) Implements ITestTypeRepository.GetDataById
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetDataByIdDbCommand(Id)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestType(reader.GetInt32("Id"), reader.GetString("Name"),
                                     reader.GetString("TestValidatorType"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveData() as ICollection(Of TestType) Implements ITestTypeRepository.GetActiveData
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetActiveDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestType(reader.GetInt32("Id"), reader.GetString("Name"),
                                     reader.GetString("TestValidatorType"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
        End Function

        Public Function GetActiveDataPageable(sortExpression As String, page As Int32, pageSize As Int32) _
            as PagedResult(Of TestType) Implements ITestTypeRepository.GetActiveDataPageable
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetActiveDataPageableDbCommand(sortExpression,
                                                                                                     page, PageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList as new Collection(Of TestType)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim _
                    tempEntity As _
                        New TestType(reader.GetInt32("Id"), reader.GetString("Name"),
                                     reader.GetString("TestValidatorType"), reader.GetBoolean("IsActive"))
                entList.Add(tempEntity)
            Loop
            reader.Close
            Dim totalCount as Int64 = GetActiveDataRowCount()
            Dim pagedResults as PagedResult(Of TestType) = New PagedResult(Of TestType)(page, pageSize, totalCount,
                                                                                        entList)
            Return pagedResults
        End Function

        Public Function GetActiveDataRowCount() as Int32
            Dim command As IDbCommand = _dbTestTypeCommandProvider.GetGetActiveDataRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue
        End Function


#Region "IDisposable Support"

        Private disposedValue As Boolean

        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub

#End Region
    End Class
End NameSpace
