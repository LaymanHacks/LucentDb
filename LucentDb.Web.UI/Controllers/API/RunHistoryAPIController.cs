//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using LucentDb.Data.DbCommandProvider;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;

namespace LucentDb.Web.UI.Controllers.Api
{
    public class RunHistoryApiController : ApiController
    {
        private readonly IRunHistoryRepository _dbRepository;

        public RunHistoryApiController(IRunHistoryRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
                [Route("api/runHistories/all", Name = "RunHistoriesGetDataRoute")]
        [HttpGet]
        public IQueryable<RunHistory> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/runHistories", Name = "RunHistoriesUpdateRoute")]
        [HttpPut]
        public void Update(RunHistory runHistory)
        {
            _dbRepository.Update( (Int32)runHistory.ScriptId,  (DateTime)runHistory.RunDateTime,  (bool)runHistory.IsPass, runHistory.ResultString, runHistory.Id);
          }

        [Route("api/runHistories", Name = "RunHistoriesDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int64 id)
        {
            try
            {
                 _dbRepository.Delete(id);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/runHistories", Name = "RunHistoriesInsertRoute")]
        [HttpPost]
        public Int64 Insert(RunHistory runHistory)
        {
             return _dbRepository.Insert( (Int32)runHistory.ScriptId,  (DateTime)runHistory.RunDateTime,  (bool)runHistory.IsPass, runHistory.ResultString);
          }

        [Route("api/runHistories", Name = "RunHistoriesGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "RunHistoriesGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts/{scriptId}/runHistories/all", Name = "RunHistoriesGetDataByIdRoute")]
        [HttpGet]
        public IQueryable<RunHistory> GetDataById(Int64 id) 
        {
            return _dbRepository.GetDataById(id).AsQueryable();
        }

        [Route("api/runHistories/all", Name = "RunHistoriesGetDataByScriptIdRoute")]
        [HttpGet]
        public IQueryable<RunHistory> GetDataByScriptId(Int32 scriptId) 
        {
            return _dbRepository.GetDataByScriptId(scriptId).AsQueryable();
        }

        [Route("api/runHistories", Name = "RunHistoriesGetDataByScriptIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByScriptIdPageable(Int32 scriptId, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByScriptIdPageable(scriptId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByScriptIdRowCount(scriptId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "RunHistoriesGetDataByScriptIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
