//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using LucentDb.Data.DbCommandProvider;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;

namespace LucentDb.Web.UI.Controllers.Api
{
    public class Script_ExpectedResultApiController : ApiController
    {
        private readonly IScript_ExpectedResultRepository _dbRepository;

        public Script_ExpectedResultApiController(IScript_ExpectedResultRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
        [Route("api/script_ExpectedResult/all", Name = "Script_ExpectedResultGetDataRoute")]
        [HttpGet]
        public IQueryable<Script_ExpectedResult> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/script_ExpectedResult", Name = "Script_ExpectedResultUpdateRoute")]
        [HttpPut]
        public void Update(Script_ExpectedResult script_ExpectedResult, Int32 Original_ScriptId,  Int32 Original_ExpectedResultId)
        {
            _dbRepository.Update( (Int32)script_ExpectedResult.ScriptId,  (Int32)script_ExpectedResult.ExpectedResultId,  (Int32)script_ExpectedResult.ResultIndex,  (Int32)Original_ScriptId,  (Int32)Original_ExpectedResultId);
          }

        [Route("api/script_ExpectedResult", Name = "Script_ExpectedResultDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 scriptId, Int32 expectedResultId)
        {
            try
            {
                 _dbRepository.Delete(scriptId, expectedResultId);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/script_ExpectedResult", Name = "Script_ExpectedResultInsertRoute")]
        [HttpPost]
        public Script_ExpectedResult  Insert(Script_ExpectedResult script_ExpectedResult)
        {
            return _dbRepository.Insert((Int32)script_ExpectedResult.ScriptId, (Int32)script_ExpectedResult.ExpectedResultId, (Int32)script_ExpectedResult.ResultIndex).FirstOrDefault();
          }

        [Route("api/script_ExpectedResult", Name = "Script_ExpectedResultGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "Script_ExpectedResultGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/script_ExpectedResult/all", Name = "Script_ExpectedResultGetDataByScriptIdExpectedResultIdRoute")]
        [HttpGet]
        public IQueryable<Script_ExpectedResult> GetDataByScriptIdExpectedResultId(Int32 scriptId, Int32 expectedResultId) 
        {
            return _dbRepository.GetDataByScriptIdExpectedResultId(scriptId, expectedResultId).AsQueryable();
        }

        [Route("api/expectedResults/{expectedResultId}/script_ExpectedResult/all", Name = "Script_ExpectedResultGetDataByExpectedResultIdRoute")]
        [HttpGet]
        public IQueryable<Script_ExpectedResult> GetDataByExpectedResultId(Int32 expectedResultId) 
        {
            return _dbRepository.GetDataByExpectedResultId(expectedResultId).AsQueryable();
        }

        [Route("api/expectedResults/{expectedResultId}/script_ExpectedResult", Name = "Script_ExpectedResultGetDataByExpectedResultIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByExpectedResultIdPageable(Int32 expectedResultId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByExpectedResultIdPageable(expectedResultId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByExpectedResultIdRowCount(expectedResultId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "Script_ExpectedResultGetDataByExpectedResultIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts/{scriptId}/script_ExpectedResult/all", Name = "Script_ExpectedResultGetDataByScriptIdRoute")]
        [HttpGet]
        public IQueryable<Script_ExpectedResult> GetDataByScriptId(Int32 scriptId) 
        {
            return _dbRepository.GetDataByScriptId(scriptId).AsQueryable();
        }

        [Route("api/scripts/{scriptId}/script_ExpectedResult", Name = "Script_ExpectedResultGetDataByScriptIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByScriptIdPageable(Int32 scriptId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByScriptIdPageable(scriptId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByScriptIdRowCount(scriptId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "Script_ExpectedResultGetDataByScriptIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
