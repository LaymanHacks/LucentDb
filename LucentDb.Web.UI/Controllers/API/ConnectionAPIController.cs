//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using LucentDb.Data.DbCommandProvider;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;

namespace LucentDb.Web.UI.Controllers.Api
{
    public class ConnectionApiController : ApiController
    {
        private readonly IConnectionRepository _dbRepository;

        public ConnectionApiController(IConnectionRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
        [Route("api/connections/all", Name = "ConnectionsGetDataRoute")]
        [HttpGet]
        public IQueryable<Connection> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/connections", Name = "ConnectionsUpdateRoute")]
        [HttpPut]
        public void Update(Connection connection)
        {
            _dbRepository.Update(connection.ProjectId,  (Int32)connection.ConnectionProviderId, connection.Name, connection.ConnectionString,  (bool)connection.IsDefault,  (bool)connection.IsActive,  (Int32)connection.ConnectionId);
          }

        [Route("api/connections", Name = "ConnectionsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 connectionId)
        {
            try
            {
                 _dbRepository.Delete(connectionId);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/connections", Name = "ConnectionsInsertRoute")]
        [HttpPost]
        public Int32 Insert(Connection connection)
        {
             return _dbRepository.Insert(connection.ProjectId,  (Int32)connection.ConnectionProviderId, connection.Name, connection.ConnectionString,  (bool)connection.IsDefault,  (bool)connection.IsActive);
          }

        [Route("api/connections", Name = "ConnectionsGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/connections/all", Name = "ConnectionsGetDataByConnectionIdRoute")]
        [HttpGet]
        public IQueryable<Connection> GetDataByConnectionId(Int32 connectionId) 
        {
            return _dbRepository.GetDataByConnectionId(connectionId).AsQueryable();
        }

        [Route("api/connections/all/active", Name = "ConnectionsGetActiveDataRoute")]
        [HttpGet]
        public IQueryable<Connection> GetActiveData() 
        {
            return _dbRepository.GetActiveData().AsQueryable();
        }

        [Route("api/connections/active", Name = "ConnectionsGetActiveDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetActiveDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetActiveDataPageable(sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/connectionProviders/{connectionProviderId}/connections/all", Name = "ConnectionsGetDataByConnectionProviderIdRoute")]
        [HttpGet]
        public IQueryable<Connection> GetDataByConnectionProviderId(Int32 connectionProviderId) 
        {
            return _dbRepository.GetDataByConnectionProviderId(connectionProviderId).AsQueryable();
        }

        [Route("api/connectionProviders/{connectionProviderId}/connections", Name = "ConnectionsGetDataByConnectionProviderIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByConnectionProviderIdPageable(Int32 connectionProviderId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByConnectionProviderIdPageable(connectionProviderId, sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/connectionProviders/{connectionProviderId}/connections/all/active", Name = "ConnectionsGetActiveDataByConnectionProviderIdRoute")]
        [HttpGet]
        public IQueryable<Connection> GetActiveDataByConnectionProviderId(Int32 connectionProviderId) 
        {
            return _dbRepository.GetActiveDataByConnectionProviderId(connectionProviderId).AsQueryable();
        }

        [Route("api/connectionProviders/{connectionProviderId}/connections/active", Name = "ConnectionsGetActiveDataByConnectionProviderIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetActiveDataByConnectionProviderIdPageable(Int32 connectionProviderId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetActiveDataByConnectionProviderIdPageable(connectionProviderId, sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/projects/{projectId}/connections/all", Name = "ConnectionsGetDataByProjectIdRoute")]
        [HttpGet]
        public IQueryable<Connection> GetDataByProjectId(Int32 projectId) 
        {
            return _dbRepository.GetDataByProjectId(projectId).AsQueryable();
        }

        [Route("api/projects/{projectId}/connections", Name = "ConnectionsGetDataByProjectIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByProjectIdPageable(Int32 projectId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByProjectIdPageable(projectId, sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }

        [Route("api/projects/{projectId}/connections/all/active", Name = "ConnectionsGetActiveDataByProjectIdRoute")]
        [HttpGet]
        public IQueryable<Connection> GetActiveDataByProjectId(Int32 projectId) 
        {
            return _dbRepository.GetActiveDataByProjectId(projectId).AsQueryable();
        }

        [Route("api/projects/{projectId}/connections/active", Name = "ConnectionsGetActiveDataByProjectIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetActiveDataByProjectIdPageable(Int32 projectId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetActiveDataByProjectIdPageable(projectId, sortExpression, page, pageSize);

            return Request.CreateResponse(HttpStatusCode.OK, results);
        }


    }
}
