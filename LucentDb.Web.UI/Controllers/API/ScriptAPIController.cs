//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using LucentDb.Data.DbCommandProvider;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;

namespace LucentDb.Web.UI.Controllers.Api
{
    public class ScriptApiController : ApiController
    {
        private readonly IScriptRepository _dbRepository;

        public ScriptApiController(IScriptRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
        [Route("api/scripts/all", Name = "ScriptsGetDataRoute")]
        [HttpGet]
        public IQueryable<Script> GetData()
        {
            var returnScripts = _dbRepository.GetData();
           
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/scripts", Name = "ScriptsUpdateRoute")]
        [HttpPut]
        public void Update(Script script)
        {
            _dbRepository.Update( (Int32)script.ScriptTypeId, script.Name, script.ScriptValue,  (bool)script.IsActive,  (Int32)script.Id);
          }

        [Route("api/scripts", Name = "ScriptsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 id)
        {
            try
            {
                 _dbRepository.Delete(id);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/scripts", Name = "ScriptsInsertRoute")]
        [HttpPost]
        public Int32 Insert(Script script)
        {
             return _dbRepository.Insert( (Int32)script.ScriptTypeId, script.Name, script.ScriptValue,  (bool)script.IsActive);
          }

        [Route("api/scripts", Name = "ScriptsGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts/{id}", Name = "ScriptsGetDataByIdRoute")]
        [HttpGet]
        public Script GetDataById(Int32 id) 
        {
            return _dbRepository.GetDataById(id).FirstOrDefault();
        }

        [Route("api/scripts/all/active", Name = "ScriptsGetActiveDataRoute")]
        [HttpGet]
        public IQueryable<Script> GetActiveData() 
        {
            return _dbRepository.GetActiveData().AsQueryable();
        }

        [Route("api/scripts/active", Name = "ScriptsGetActiveDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetActiveDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetActiveDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetActiveDataRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetActiveDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/tests/{testId}/scripts/all", Name = "ScriptsGetScriptsForTestByTestIdRoute")]
        [HttpGet]
        public IQueryable<Script> GetScriptsForTestByTestId(Int32 id) 
        {
            return _dbRepository.GetScriptsForTestByTestId(id).AsQueryable();
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts/all", Name = "ScriptsGetDataByScriptTypeIdRoute")]
        [HttpGet]
        public IQueryable<Script> GetDataByScriptTypeId(Int32 scriptTypeId) 
        {
            return _dbRepository.GetDataByScriptTypeId(scriptTypeId).AsQueryable();
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts", Name = "ScriptsGetDataByScriptTypeIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByScriptTypeIdPageable(Int32 scriptTypeId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByScriptTypeIdPageable(scriptTypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByScriptTypeIdRowCount(scriptTypeId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetDataByScriptTypeIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts/all/active", Name = "ScriptsGetActiveDataByScriptTypeIdRoute")]
        [HttpGet]
        public IQueryable<Script> GetActiveDataByScriptTypeId(Int32 scriptTypeId) 
        {
            return _dbRepository.GetActiveDataByScriptTypeId(scriptTypeId).AsQueryable();
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts/active", Name = "ScriptsGetActiveDataByScriptTypeIdPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetActiveDataByScriptTypeIdPageable(Int32 scriptTypeId, String sortExpression, Int32 page, Int32 pageSize) 
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetActiveDataByScriptTypeIdPageable(scriptTypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetActiveDataByScriptTypeIdRowCount(scriptTypeId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetActiveDataByScriptTypeIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
