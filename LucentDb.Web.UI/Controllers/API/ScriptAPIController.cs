//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using LucentDb.Data.Repository;
using LucentDb.Domain.Entities;

namespace LucentDb.Web.UI.Controllers.Api
{
    public class ScriptApiController : ApiController
    {
        private readonly IScriptRepository _dbRepository;

        public ScriptApiController(IScriptRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }

        [Route("api/scripts", Name = "ScriptsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(int id)
        {
            try
            {
                _dbRepository.Delete(id);
                return Request.CreateResponse(HttpStatusCode.OK);
            }
            catch (Exception)
            {
                return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/scripts/all", Name = "ScriptsGetActiveDataRoute")]
        [HttpGet]
        public IQueryable<Script> GetActiveData()
        {
            return _dbRepository.GetActiveData().AsQueryable();
        }

        [Route("api/scripts/all", Name = "ScriptsGetActiveDataByScriptTypeIdRoute")]
        [HttpGet]
        public IQueryable<Script> GetActiveDataByScriptTypeId(int scriptTypeId)
        {
            return _dbRepository.GetActiveDataByScriptTypeId(scriptTypeId).AsQueryable();
        }

        [Route("api/scripts", Name = "ScriptsGetActiveDataByScriptTypeIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetActiveDataByScriptTypeIdPageable(int scriptTypeId, string sortExpression, int page,
            int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetActiveDataByScriptTypeIdPageable(scriptTypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetActiveDataByScriptTypeIdRowCount(scriptTypeId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request,
                "ScriptsGetActiveDataByScriptTypeIdPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts", Name = "ScriptsGetActiveDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetActiveDataPageable(string sortExpression, int page, int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetActiveDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetActiveDataRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetActiveDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts/all", Name = "ScriptsGetDataRoute")]
        [HttpGet]
        public IQueryable<Script> GetData()
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts/all", Name = "ScriptsGetDataByIdRoute")]
        [HttpGet]
        public IQueryable<Script> GetDataById(int id)
        {
            return _dbRepository.GetDataById(id).AsQueryable();
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts/all", Name = "ScriptsGetDataByScriptTypeIdRoute")]
        [HttpGet]
        public IQueryable<Script> GetDataByScriptTypeId(int scriptTypeId)
        {
            return _dbRepository.GetDataByScriptTypeId(scriptTypeId).AsQueryable();
        }

        [Route("api/scriptTypes/{scriptTypeId}/scripts", Name = "ScriptsGetDataByScriptTypeIdPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataByScriptTypeIdPageable(int scriptTypeId, string sortExpression, int page,
            int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataByScriptTypeIdPageable(scriptTypeId, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByScriptTypeIdRowCount(scriptTypeId);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetDataByScriptTypeIdPageableRoute",
                page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts", Name = "ScriptsGetDataPageableRoute")]
        [HttpGet]
        public HttpResponseMessage GetDataPageable(string sortExpression, int page, int pageSize)
        {
            if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results = _dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ScriptsGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/scripts", Name = "ScriptsInsertRoute")]
        [HttpPost]
        public int Insert(Script script)
        {
            return _dbRepository.Insert(script.TestId, script.ScriptTypeId, script.Name, script.ScriptValue,
                script.IsActive);
        }

        [Route("api/scripts", Name = "ScriptsUpdateRoute")]
        [HttpPut]
        public void Update(Script script)
        {
            _dbRepository.Update(script.TestId, script.ScriptTypeId, script.Name, script.ScriptValue, script.IsActive,
                script.Id);
        }
    }
}